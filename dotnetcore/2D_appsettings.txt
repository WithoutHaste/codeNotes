##appsettings.json

.Net Core uses appsettings.json instead of Web.Config with ConfigurationManager. .Net Core allows you to read settings from many sources, but this is going to focus on the standard appsettings file.

Make sure appsettings.json is set to "Copy to Output Directory".

Use appsettings.json for prod settings.
Use appsettings.Development.json to override prod settings with development values.

#With Startup

Default Program class will setup configuration
<code>
public static IWebHostBuilder CreateWebHostBuilder(string[] args) {
	return WebHost
		.CreateDefaultBuilder(args) //this line sets up configuration
		.UseStartup<Startup>();
}
</code>
Use dependency injection to access configuration
<code>
using Microsoft.Extensions.Configuration; //from Microsoft.Extensions.Configuration.Abstractions.dll

public ClassConstructor(IConfiguration configRoot)
{
}
</code>

#Without Startup

Access appsettings without a Startup() method
<code>
using Microsoft.Extensions.Configuration;
//also install Microsoft.Extensions.Configuration.Json
//also install Microsoft.Extensions.Configuration.FileExtensions

public static IConfiguration GetConfig()
{
    var builder = new ConfigurationBuilder()
        .SetBasePath(System.AppContext.BaseDirectory)
        .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);

    return builder.Build();
}
</code>

#Accessing Settings

Sample json and lookup commands
<code lang="json">
{
	"fieldA": "textA",
	"fieldB": {
		"fieldB1": "textB1"
	}
}
</code>
<code>
var settings = configRoot; //from Startup example
var settings = ConfigurationHelper.GetConfig(); //from without Startup example
Assert.AreEqual("textA", settings["fieldA"]);
Assert.AreEqual("textB1", settings["fieldB:fieldB1"]);
</code>

#Options Pattern

You can bind a section of settings to strongly-typed objects.

<code lang="json">
{
	"Connection": {
		"Database": "db_connection_string",
		"Timeout": 30
	}
}
</code>
<code>
public class ConnectionOptions
{
	public string Database { get; set; }
	public int Timeout { get; set; }
}
</code>

Manual binding
<code>
var connectionOptions = new ConnectionOptions();
Configuration.GetSection("Connection").Bind(connectionOptions);
</code>

Dependency Injection binding
<code>
//in Startup.cs
public void ConfigureServices(IServiceCollection services)
{
    services.Configure<ConnectionOptions>(Configuration.GetSection("Connection"));
    services.AddMvc();
}
//Dependency Injection
using Microsoft.Extensions.Options;
public ClassConstructor(IOptions<ConnectionOptions> options)
{
	ConnectionOptions settings = options.Value;
}
</code>

Note that Entity Framework Core DbContext(connectionStringName) will look for appsettings section "ConnectionStrings" with a field named that same as the connectionStringName value.
Or set it explicitly
<code>
using Microsoft.EntityFrameworkCore; //with Microsoft.EntityFrameworkCore.dll and Microsoft.EntityFrameworkCore.SqlServer.dll installed

public void ConfigureServices(IServiceCollection services)
{
	services.AddDbContext<MyDbContext>(options => options.UseSqlServer(Configuration.GetConnectionString("NamesDatabase")));
} 
</code>
With appsettings.json
<code lang="json">
{
  "ConnectionStrings": {
    "NamesDatabase": "Data Source=(LocalDb)\\MSSQLLocalDB;Initial Catalog=NameDatabase;Integrated Security=True;"
  }
}
</code>

# Including Settings from Environment Variables

For production, settings like connection strings will be set as an Environment Variable instead of being hard-coded and version controlled.

<code>
var builder = new ConfigurationBuilder()
    .SetBasePath(basePath)
    .AddJsonFile("appsettings.json")
    .AddJsonFile($"appsettings.{environmentName}.json", true)
    .AddEnvironmentVariables(); #this seems to be auto-configured in netcoreapp3.1
</code>

Environment variable names use a double underscore (__) instead of colon (:).
Ex: "ConnectionStrings__Defaul=X" instead of the appsettings.json "ConnectionStrings { Default="X" }".
