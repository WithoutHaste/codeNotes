##Misc Operations

#Conditional Patterns

Using template literal for if/else
<code>
	<td className={`${house.price >= 500000 ? "highlight" : ""}`}>
		{house.price}
	</td>
</code>

Using lazy evaluation for if/else
The TD will only be rendered if "price" is "truthy" (not 0 or undefined)
<code>
	{house.price && (
		<td>{house.price}</td>
	)}
</code>

Conditionally Rendering Components
<code>
const [selectedHouse, setSelectedHouse] = useState();
return (
	{selectedHouse ? <House house={selectedHouse} /> : <HouseList />}
);
</code>
If a house is selected, display its details. Otherwise show the whole list of houses.
This also needs: a way for HouseList to update the higher-level setSelectedHouse() hook:
Shared State
<code>
const [selectedHouse, setSelectedHouse] = useState();
return (
	{selectedHouse ? 
		<House house={selectedHouse} /> : 
		<HouseList selectHouse={setSelectedHouse}/>} //pass the setter into the lower-level module, it can be called from there
);

Conditionally including one element in an array:
<code>
	<MyComponent listItems=[
		{
			value: 1,
		},
		...((condition) ? [] : [{
			value: 2,
		}]),
		{
			value: 3,
		},
	] />
</code>

//in HouseList, click a row to select it
const HouseRow = ({house, selectHouse}) => {
	return (
		<tr onClick={() => selectedHouse(oldHouse => house)}>
			//...display house row
		</tr>
	);
};
</code>
If it is too risky to let the child component run the setter, use a wrapper function:
<code>
//top level
const [selectedHouse, setSelectedHouse] = useState();
const setSelectedHouseWrapper = (house) => { //pass this to child components
	//can put checks here, verifying "house" is the correct data type
	setSelectedHouse(house);
};
</code>
This does create a new instance of the wrapper function when the component is re-rendered, and if that wrapper instance is passed into a memoized component, then it can cause more accidental re-rendering. Similar issue if the wrapper ends up in a dependency array.
Can avoid these issues by using hook useCallback instead. This will preserve the same function reference across re-renders.
This does add overhead, so don't use it everywhere.
<code>
const setHouseWrapper =	useCallback((house) => {
	setSelectedHouse(house);
}, []); //this here is why is only creates one new function on the first render, and not again on each re-render
</code>

#Context

You don't have to pass setters through props to share state (prop drilling: passing props down and down and down through components, not even used by the intermediate components)
you can also use Context

Each context is available in any descendant component of the component that created it

<code>
const context = React.createContext("default");

return (
	<context.Provider value="x"> //"x" is passed, if no value is defined then that "default" is passed
		//children components
	</context.Provider>
);
</code>
With this, both direct child components and all lower descendent components can read the Context.
<code>
const value = useContext(context);
//or
	<context.Consumer>
		{ value => /*render with the provided value*/ }
	</context.Consumer>
</code>
When the context value changes, all components that use it will re-render.
Example usage
<code>
//this is exported so any other component can import it
export const navigationContext = React.createContext(defaultNavValues.start);

const Component = () => {
	const navigate = useCallback(
		(navTo) => setNav({ current: navTo, navigate }),
		[]
	);
	
	const [nav, setNav] = useState({ current: defaultNavValues.start, navigate });
	
	return (
		<navigationContext.Provider value={nav}> //when nav state is changed, it will trigger re-renders
			//children
		</navigationContext.Provider>
	);
};
//in child component
const ChildComponent = () => {
	const { navigate } = useContext(navigatorContext); //can be used to change the state
};
</code>
So we're still using State to share data and trigger re-renders.
The Context is just making it so we don't have to explicitly pass the State variables into every child component.


