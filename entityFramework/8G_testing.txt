##Testing

Starting in EF 6, there is better support for Mocking DbSets. In EF 5, Mock was not allowed to override the DbSet constructor.

Note: any DbSet property in your DbContext that you want to Mock must be marked Virtual.

Recommendation: any time you find yourself needing to Mock EF objects in a test, consider if the method you are tested can be refactored so you can test what you need to, without Mocking any EF objects.

#Mocking Linq Queries

<code>
public List<Country> GetSomeCountries()
{
	return dbContext.Countries.Where(someFilter).ToList();
}
...
public void Test_GetSomeCountries()
{
	//arrange
	IQueryable<Country> countries = (new List<Country>() { new Country("Argentina") }).AsQueryable();
	
	var mockContext = new Mock<GeographyContext>();
	Mock<DbSet<Country>> queryableMockSet = SetupQueryableMockSet(countries);
	mockContext.Setup(context => context.Countries).Returns(queryableMockSet.Object);
	
	//act
	//assert
}
private static Mock<DbSet<Country>> SetupQueryableMockSet(IQueryable<Country> countries)
{
	var mockSet = new Mock<DbSet<Country>>();
	mockSet.As<IQueryable<Country>>().Setup(x => x.Provider).Returns(countries.Provider);
	mockSet.As<IQueryable<Country>>().Setup(x => x.Expression).Returns(countries.Expression);
	mockSet.As<IQueryable<Country>>().Setup(x => x.ElementType).Returns(countries.ElementType);
	mockSet.As<IQueryable<Country>>().Setup(x => x.GetEnumerator()).Returns(countries.GetEnumerator());
	return mockSet;
}
</code>

#In-Memory Database

(examples are for Entity Framework Core)

Use a in-memory database to really test your query logic.

Add a constructor to your Context for testing:
<code>
using Microsoft.EntityFrameworkCore;

public class MyContext : DbContext
{
    public MyContext()
    { }

    public MyContext(DbContextOptions<MyContext> options)
        : base(options)
    { }

	//make sure you don't set up another provider, if one is already set
	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
	{
		if (!optionsBuilder.IsConfigured)
		{
			//setup provider, such as optionsBuilder.UseSqlServer(connectionString);
		}
	}
}
</code>

Unit tests:
<code>
using Microsoft.EntityFrameworkCore;
//you will need to install NuGet package Microsoft.EntityFrameworkCore.InMemory
//it comes in under the Microsoft.EntityFrameworkCore namespace, so another using statement is not needed

public void MyUnitTest()
{
	var options = new DbContextOptionsBuilder<MyContext>()
		.UseInMemoryDatabase(databaseName: "in_memory_db")
		.Options;

	// Run the test against one instance of the context
	using (var context = new MyContext(options))
	{
		var service = new MyService(context);
		service.AddBlog("https://example.com");
		context.SaveChanges();
	}

	// Use a separate instance of the context to verify correct data was saved to database
	using (var context = new MyContext(options))
	{
		Assert.Equal(1, context.Blogs.Count());
		Assert.Equal("https://example.com", context.Blogs.Single().Url);
	}
}
</code>
The "databaseName" is the unique identifier of the in-memory database. A new name will cause a new in-memory database to be created.

To clear the in-memory database before a test:
<code>
myContext.Database.EnsureDeleted();
</code>
Or you can generate each new one with a new unique id such as
<code>
optionsBuilder.UseInMemoryDatabase(Guid.NewGuid().ToString());
</code>

To test lazy vs eager loading, such as the use of Include statements, add this to your in-memory DbContext:
<code>
/// <summary>
/// The Entity Framework in-memory implementation defaults to eager loading everything,
/// which makes is impossible to unit test Include statements.
/// This effectively turns off eager loading
/// Source: https://stackoverflow.com/questions/52740665/how-to-disable-eager-loading-when-using-inmemorydatabase
///     I came to the conclusion that the problem is really because the code-under-test is reading from the ChangeTracker 
///     where the test code has already assembled the object graph. Armed with that knowledge, I took my DbContext 
///     and overrode the SaveChanges method as shown below.
///     By detaching every object in the ChangeTracker it forces the code-under-test to go back to the database instead 
///     of pulling the existing object graph from the ChangeTracker.
/// </summary>
public override int SaveChanges()
{
	var affectedRows = base.SaveChanges();

	if (Database.ProviderName == "Microsoft.EntityFrameworkCore.InMemory")
	{
		ChangeTracker.Entries()
			.Where(e => e.Entity != null)
			.ToList()
			.ForEach(e => e.State = EntityState.Detached);
	}

	return affectedRows;
}
</code>