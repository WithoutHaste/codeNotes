##Flow Controls

#For

Loop till condition
<code>
var i int //defaults to 0
for i < 5 {
	i++ //increment operation
}
</code>

Loop till condition with post clause
<code>
for i := 0; i < 5; i++ { //i only exists within the scope of the loop
}
</code>
<code>
var i int //i exists outside the loop
for ; i < 5; i++ {
}
</code>

Infinite loop, explicit
<code>
for {
}
</code>

Break out of loop early
<code>
var i int
for i < 5 {
	break
}
</code>

Continue with next iteration of the loop
<code>
var i int
for i < 5 {
	i++
	continue
	println(i) //this line is never run
}
</code>

#For Range

Loop over collections
<code>
x := []int{1, 2, 3}
for i, v := range x { //i is index, v is value
	println(i, v)
}
</code>
<code>
x := []int{1, 2, 3}
for i := range x { //i is index, value is ignored - useful for maps
	println(i)
}
</code>
<code>
x := []int{1, 2, 3}
for _, v := range x { //index is ignored, v is value
	println(v)
}
</code>

Note that the "value" is a copy - editing it will not update the original value.

#If Else

<code>
if i < 5 {
}
if x == y {
}
if 1 != 2 {
}
</code>

<code>
if x == y {
} else {
}
</code>

<code>
if x == y {
} else if x < 5 {
} else { //final else statement is not required
}
</code>

If Assignment Scope
<code>
x := getValue()
if x == 0 {
}

if x := getValue(); x == 0 {
}
</code>
Both of these examples are valid. The second one does not clutter the current function scope with variable "x".

#Switch

The tabbing looks weird to me, but it is the convention.

<code>
x := "b"
switch x {
case "a":
	println("found a")
case "b":
	println("found b")
case "c":
	println("found c")
}
</code>
Each case statement has an implicit break - so cases do not fall through to the next one.

Explicit fallthrough
<code>
switch x {
case "a":
	println("found a")
	fallthrough
case "b":
	println("found b")
}
</code>

Default case
<code>
switch x {
case "a":
	println("found a")
case "b":
	println("found b")
default:
	println("found default")
}
</code>

#Panic/Recover

Similar to exceptions in other languages - the program does not know how to proceed from an error.

<code>
panic("Database connection failed")
</code>
This will be output to stdout with a stack trace
Code execution stops at a panic

When the function F calls panic, execution of F stops, any deferred functions in F are executed normally, and then F returns to its caller. To the caller, F then behaves like a call to panic. The process continues up the stack until all functions in the current goroutine have returned, at which point the program crashes.

Recover is a built-in function that regains control of a panicking goroutine. It is only used within "defer" functions.
<code>
defer func() {
	_ = dbConnection.Close() //try to cleanup normally
	if r:= recover(); r != nil { //check if a panic is occurring
		println("recovered from panic", r) //print what was passed into the panic
	}
}
</code>
