##Query

Mongo's query language is called MQL.

#Comments

<code>
//comment out a line of MQL
</code>

#Find

Find will return a list of records.

Where field equals X:
<code>
db.getCollection('MyCollection').find({"myField": "X"})
db.getCollection('MyCollection').find({"myObject.myField": "X"})
db.getCollection('MyCollection').find({"myField": UUID("12345678-1234-1234-1234-123456789012")})
</code>

Where field exists:
<code>
db.getCollection('MyCollection').find({"myObject.myField":{$exists: true}})
</code>
If any link in the path to the field does not exist, then the field does not exist.

And
<code>
db.getCollection('MyCollection').find({$and: [{"myFieldA": "A"}, {"myFieldB": "B"}])
</code>

Array is at least 1-element long
<code>
db.getCollection.find({'myArray.0': {$exists: true}})
</code>
(indexing starts at 0)

Array is exactly 2-elements long
<code>
db.getCollection.find({'myArray': {$size: 2}})
</code>

#Sort

Sort by age descending:
<code>
db.collection.find().sort( { age: -1 } )
</code>

#Limit

Return just the first X records.
<code>
db.collection.find().sort( { age: -1 } ).limit(50)
</code>
If sort gives you an "exceeded memory limit" then add a limit to the number of results.

#Distinct

<code>
db.getCollection('customers').distinct('firstName')
</code>
Returns all the distinct values of the field "firstName" from collection "customers".

#String Operations

String minus last two characters:
<code>
myField: { $substr: [ "$originField", 0, { $subtract: [ { $strLenCP: "$originField" }, 2 ] } ] }
</code> 

Last two characters of string:
<code>
myField: { $substr: [ "$originField", { $subtract: [ { $strLenCP: "$originField" }, 2 ] }, -1 ] }
</code>

String contains
<code>
db.getCollection('customers').find({fullName: { $regex: '.*Steve.*' } })
db.getCollection('customers').find({fullName: { $regex: /.*Steve.*/ } })
</code>
Capitalization matters

#Aggregate

Count results (returns integer):
<code>
db.getCollection('MyCollection').find({"myField": "X"}).count()
</code>

#Aggregation Pipeline

Each expression (array element) in an aggregate can be mixed up in any order, repeated, etc.
Ex: You can have three "match" expressions, then a "replaceRoot", then another "match".

Just like find:
<code>
db.getCollection('Customers').aggregate([
	{ $match: { _id: UUID("customer's uuid") } }
])
</code>

Find, then raise a nested document to be the new root of each result:
<code lang="json">
//given this customer format
{
	_id: UUID("uuid"),
	age: 35,
	address: {
		street: "street",
		city: "city",
		state: "state"
	}
}
</code>
<code>
db.getCollection('Customers').aggregate([
	{ $match: { _id: UUID("customer's uuid") } },
	{ $replaceRoot: { newRoot: "$address" } } //pulls all of address up be the root
])
</code>
<code lang="json">
//results in
{
	street: "street",
	city: "city",
	state: "state"
}
</code>

<code>
db.getCollection('Customers').aggregate([
	{ $match: { _id: UUID("customer's uuid") } },
	{ $replaceRoot: { newRoot: { age: "$age", city: "$address.city" } } } //flattens different levels together
])
</code>
<code lang="json">
//results in
{
	age: 35,
	city: "city"
}
</code>

Group by:
Start with the group by id, then add as many aggregations as you want.
<code>
db.getCollection('Customers').aggregate([
    { $group: { _id: "$idField", arrayA: { $addToSet: { "fieldA":"$aValue", "fieldB":"$bValue" } } } }
])
</code>

A group with a multi-part key
<code>
db.getCollection('Customers').aggregate([
    { $group: { _id: { a: "$a", b: "$b" } } }
])
</code>

"addToSet" creates an array of unique values
<code>
db.getCollection('Customers').aggregate([
    { $group: { _id: "$idField", arrayA: { $addToSet: "$aField" }, arrayB: { $addToSet: "$bField" } } }
])
</code>
And don't look for a DISTINCT operation in aggregate pipelines, there isn't one, group by is the only option.

AddField:
Add a new field to the documents
<code>
{ $addFields: { <newField>: <expression>, ... } }
</code>

Project to filter an array:
<code>
db.getCollection('MyCollection').aggregate([
{
	"$project" : {
		"field_to_keep_as_is": 1,
		"my_filtered_array" : {
			"$filter" : {
				"input" : "$my_array",
				"as" : "my_array", /*defaults to "this"*/
				"cond" : {
					/*$eq: ["$$my_array.some_field", "some_value" ]*/ /*if you want to check for a value*/
					$not: ["$$my_array.field_that_might_not_exist"] /*$exists doesn't work in here*/
				}
			}
		}
	}
}
]);
</code>

Simplify an array
<code>
db.getCollection('poc_agencies').aggregate([
    { $project: {  
            "array_of_strings": {
                $reduce: {
                    input: "$input_array_of_objects",
                    initialValue: [],
                    in: { $concatArrays: [ "$$value", ["$$this.keep_just_this_field"] ] }
                }
            }
        } 
    }
]);
</code>
- $$value refers to the current accumulated value
- $$this refers to the next array element being operated on

Unwind, to break an array into individual objects
<code>
db.getCollection('MyCollection').aggregate([
{
	$unwind: "$my_array"
}
]);
</code>

Flatten a recursive lookup
<code>
db.getCollection('agencies').aggregate([
    { $graphLookup: {
            from: 'agencies', //name of the collection to search
            startWith: '$_id', //field name to start with, probably same as connectionFromField but with a $ symbol
            connectFromField: '_id', //this field in parent
            connectToField: 'parentAgencyId', //connects to this field in child
            as: 'descendantAgencyIds', //put all the results into an array named this
            maxDepth: 100 //stop recursive lookup at this depth, to avoid infinite loops
        } 
    }
])
</code>

Overwrite an entire collection with the results of this pipeline
<code>
db.getCollection('input_collection_name').aggregate([
    { $out : { db: "database_name", coll: "output_collection_name" } }
])
</code>
$out must be the last step in the pipeline
