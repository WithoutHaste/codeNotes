##OAS

!![OAS on GitHub](https://github.com/OAI/OpenAPI-Specification)

OAS stands for OpenAPI Specification.
OAS is a format for documenting RESTful APIs.
OAS is language-agnostic, machine-readable, and human-readable.

You can test your OAS by opening it in Swagger UI.

!![Looks like a useful resource of OAS syntax](https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-5-advanced-input-and-output-modeling/)

#Terminology

Endpoint: a relative URI

Operation: an HTTP Verb

Operation Parameters: input and output parameters

Path Templating: the use of curly braces {} to mark a variable section of a URI
Ex: /users/{userId}/contacts means that you should insert the User Id into the URI

Fields:
	All field names are case-sensitive
	Fixed Fields have a declared name
	Patterned Fields have a regex-driven name

#Format
	
Your documentation should be valid in both JSON and YAML format.

Recommended file name is openapi.json or openapi.yaml

#Data Types

string
number
integer
boolean
array (with child "items")
object (with child "properies")

#Info Object

The Info Object provides metadata about the API.

<code lang="javascript">
{
  "title": "Sample Pet Store App",
  "description": "This is a sample server for a pet store.",
  "termsOfService": "http://example.com/terms/",
  "contact": {
    "name": "API Support",
    "url": "http://www.example.com/support",
    "email": "support@example.com"
  },
  "license": {
    "name": "Apache 2.0",
    "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
  },
  "version": "1.0.1"
}
</code>

<code lang="yaml">
title: Sample Pet Store App
description: This is a sample server for a pet store.
termsOfService: http://example.com/terms/
contact:
  name: API Support
  url: http://www.example.com/support
  email: support@example.com
license:
  name: Apache 2.0
  url: https://www.apache.org/licenses/LICENSE-2.0.html
version: 1.0.1
</code>

#Contact Object

The Contact Object provides contact information.

<code lang="javascript">
{
  "name": "API Support",
  "url": "http://www.example.com/support",
  "email": "support@example.com"
}
</code>

<code lang="yaml">
name: API Support
url: http://www.example.com/support
email: support@example.com
</code>

#License Object

#Server Object

All relative paths are relative to these URLs.

Single server:
<code lang="javascript">
{
  "url": "https://development.gigantic-server.com/v1",
  "description": "Development server"
}
</code>

<code lang="yaml">
url: https://development.gigantic-server.com/v1
description: Development server
</code>

Multiple servers:
<code lang="javascript">
{
  "servers": [
    {
      "url": "https://development.gigantic-server.com/v1",
      "description": "Development server"
    },
    {
      "url": "https://staging.gigantic-server.com/v1",
      "description": "Staging server"
    },
    {
      "url": "https://api.gigantic-server.com/v1",
      "description": "Production server"
    }
  ]
}
</code>

<code lang="yaml">
servers:
- url: https://development.gigantic-server.com/v1
  description: Development server
- url: https://staging.gigantic-server.com/v1
  description: Staging server
- url: https://api.gigantic-server.com/v1
  description: Production server
</code>

#Path Object

A relative path to an Endpoint and the Endpoint's Operations.

Paths must begin with a "/" slash.
Path templates are allowed.

<code lang="javascript">
{
  "/pets": {
    "get": {
      "description": "Returns all pets from the system that the user has access to",
      "responses": {
        "200": {          
          "description": "A list of pets.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/pet"
                }
              }
            }
          }
        }
      }
    }
  }
}
</code>

<code lang="yaml">
/pets:
  get:
    description: Returns all pets from the system that the user has access to
    responses:
      '200':
        description: A list of pets.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/pet'
</code>

#Components

The components section holds reusable data structures that can be referenced repeatedly.

<code lang='yaml'>
components:
  # Reusable schemas (data models)
  schemas:
    ...
  # Reusable path, query, header and cookie parameters
  parameters:
    ...
  # Security scheme definitions (see Authentication)
  securitySchemes:
    ...
  # Reusable request bodies
  requestBodies:
    ...
  # Reusable responses, such as 401 Unauthorized or 400 Bad Request
  responses:
    ...
  # Reusable response headers
  headers:
    ...
  # Reusable examples
  examples:
    ...
  # Reusable links
  links:
    ...
  # Reusable callbacks
  callbacks:
    ...
</code>

You do not make a list of these subsections. You simple enter multiple values.
<code lang='yaml'>
components:
  schemas:
    User:
      type: object
      ...
    Pet:
      type: object
      ...
</code>

You can address a component thus:
<code lang='yaml'>
something:
  - $ref "#/components/schemas/MySchema"
</code>
References never have sibling elements.

requestBody can also accept a list of possible schemas:
<code lang='yaml'>
paths:
  /my/path:
    post:
	  summary: My Summary
	  requestBody:
	    content:
		  application/json:
		    schema:
			  oneOf:
			    - $ref: "#/components/requestBodies/MyRequestBodyA"
			    - $ref: "#/components/requestBodies/MyRequestBodyB"
</code>
I'm not sure this is actually supported by OAS. There are many error reports against different editing tools saying that this part is not supported, and currently editor.swagger.io doesn't display it right.
This Swagger documentation shows an example of it, so it should be valid:
!![Swagger requestBody/schema/oneOf example](https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/)

#Inheritance and Polymorphism

!![On Swagger](https://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/)

You can define composition/inheritance hierarchies for your components.
<code lang="yaml">
components:
  schemas:
    BasicErrorModel:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600
    ExtendedErrorModel:
      allOf: # Combines the BasicErrorModel and this inline model
        - $ref: '#/components/schemas/BasicErrorModel'
        - type: object
          required:
            - rootCause
          properties:
            rootCause:
              type: string
</code>
