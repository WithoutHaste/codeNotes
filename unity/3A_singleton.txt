##Singleton

Unity does not have built-in support for Singleton Pattern.

Usage example:
<code>
using UnityEngine;

public MyClass : Singleton<MyClass>
{
	// (Optional) Prevent non-singleton constructor use.
	protected MyClass() { }
}
</code>

!![Code copied from Unity wiki](http://wiki.unity3d.com/index.php/Singleton)

Singleton.cs
<code>
using UnityEngine;

/// <summary>
/// Inherit from this base class to create a singleton.
/// e.g. public class MyClassName : Singleton<MyClassName> {}
/// </summary>
public class Singleton<T> : MonoBehaviour where T : MonoBehaviour
{
	// Check to see if we're about to be destroyed.
	private static bool m_ShuttingDown = false;
	private static object m_Lock = new object();
	private static T m_Instance;

	/// <summary>
	/// Access singleton instance through this propriety.
	/// </summary>
	public static T Instance
	{
		get
		{
			if (m_ShuttingDown)
			{
				Debug.LogWarning("[Singleton] Instance '" + typeof(T) + "' already destroyed. Returning null.");
				return null;
			}

			lock (m_Lock)
			{
				if (m_Instance == null)
				{
					// Search for existing instance.
					m_Instance = (T)FindObjectOfType(typeof(T));

					// Create new instance if one doesn't already exist.
					if (m_Instance == null)
					{
						// Need to create a new GameObject to attach the singleton to.
						var singletonObject = new GameObject();
						m_Instance = singletonObject.AddComponent<T>();
						singletonObject.name = typeof(T).ToString() + " (Singleton)";

						// Make instance persistent.
						DontDestroyOnLoad(singletonObject);
					}
				}

				return m_Instance;
			}
		}
	}


	private void OnApplicationQuit()
	{
		m_ShuttingDown = true;
	}


	private void OnDestroy()
	{
		m_ShuttingDown = true;
	}
}
</code>

GetOrAddComponent.cs
<code>
using UnityEngine;

static public class UnityEngineExtensions
{
	/// <summary>
	/// Returns the component of Type type. If one doesn't already exist on the GameObject it will be added.
	/// </summary>
	/// <typeparam name="T">The type of Component to return.</typeparam>
	/// <param name="gameObject">The GameObject this Component is attached to.</param>
	/// <returns>Component</returns>
	static public T GetOrAddComponent<T>(this GameObject gameObject) where T : Component
	{
		return gameObject.GetComponent<T>() ?? gameObject.AddComponent<T>();
	}
}
</code>