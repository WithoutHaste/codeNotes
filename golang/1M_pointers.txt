##Pointers

# Pass By

"When you pass a pointer as an argument, what happens under the hood is that a copy of that pointer is created and passed to the underlying function. It should not be confused with pass-by-reference."

demonstration
<code>
package main

import (
    "fmt"
)

type Point struct {
    x int
    y int
}

func (p Point) String() string {
    return fmt.Sprintf("(%d, %d)", p.x, p.y)
}

func modifyValue(point Point) {
    point.x += 10
}

func modifyPointer(point *Point) {
    point.x = 5
    point.y = 5
}

func modifyReference(point *Point) {
    point = &Point{5, 5} //the new pointer now points to a new object
}

func main() {
    p := Point{0, 0}
    fmt.Println(p) // prints (0, 0)
    
    modifyValue(p)
    fmt.Println(p) // prints (0, 0)
    
    modifyPointer(&p)
    fmt.Println(p) // prints (5, 5)
    
    p = Point{0, 0}
    modifyReference(&p)
    fmt.Println(p) // prints (0, 0)
}
</code>

# Range

The "range" operator returns copies of values, not pointers to the values.

demonstration
<code>
package main

import "fmt"

type customer struct {
	name string
}

func main() {
	customers := []customer{customer{name: "Daisy"}}
	for _, c := range customers {
		c.name = "Bob" //this is editing a copy of the customer
	}
	fmt.Println(customers) //outputs [{Daisy}]
}
</code>
