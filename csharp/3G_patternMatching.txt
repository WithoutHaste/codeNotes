##Pattern Matching

C# Pattern Matching is distinct from C# Regular Expressions.

"Pattern Matching allows you to implement method dispatch on properties other than the type of an object."
"These features represent the first tentative steps toward supporting programming paradigms where data and functionality live apart. As the industry moves toward more microservices and other cloud-based architectures, other language tools are needed."
"Consider Pattern Matching when your algorithms depend on a fact other than the runtime type of an object."

#C# 7 Switch

Switch can now be used on any type, not just ints/enums/strings.

Pattern Matching switch statements can check for types and for properties based on that type.

Example:
<code>
switch(fruit)
{
	//Type Pattern with When Condition
	case Apple apple when apple.Breed == "Red Delicious":
		MakeDeliciousApplePie(apple);
		break;
	//Type Pattern
	case Apple apple:
		MakeApplePie(apple);
		break;
	//Null Pattern
	case null:
		throw new NullReferenceException();
	default:
		throw new InvalidOperationException();
}
</code>
That case statement says:
<code>
if(fruit is Apple && (fruit as Apple).Breed == "Red Delicious")
{
	Apple apple = (fruit as Apple);
	MakeDeliciousApplePie(apple);
}
else if(fruit is Apple)
{
	Apple apple = (fruit as Apple);
	MakeApplePie(apple);
} 
else if(fruit == null)
{
	throw new NullReferenceException();
}
else
{
	throw new InvalidOperationException();
}
</code>
It is a type check and a cast to a new variable in one statement.

When used with Pattern Matching, the order of the case statements matters.
Case statements are checked top to bottom.
The first matching case statement is run and the rest are ignored.
Therefore, put your most specific case statements at the top and more general ones at the bottom.

The old style of switch statements still work, and are called "Constant Patterns".

Recommendation: don't use Pattern Matching switch statements until you are sure Polymorphism will not serve your needs.

#C# 7 Is

Example:
<code>
if(input is int count)
{
	sum += count
}
</code>
Is the same as:
<code>
if(input is int)
{
	int count = (input as int);
	sum += count;
}
</code>

#C# 8 Switch Expression

Switch statements that simply return a value can be written as expressions.
Switch expressions must either return a value or throw an Exception.

Example:
<code>
public enum Rainbow { Red, Orange, Yellow, Green, Blue, Indigo, Violet }

public static RGBColor FromRainbow(Rainbow colorBand) =>
	colorBand switch
	{
		Rainbow.Red    => new RGBColor(0xFF, 0x00, 0x00),
		Rainbow.Orange => new RGBColor(0xFF, 0x7F, 0x00),
		Rainbow.Yellow => new RGBColor(0xFF, 0xFF, 0x00),
		Rainbow.Green  => new RGBColor(0x00, 0xFF, 0x00),
		Rainbow.Blue   => new RGBColor(0x00, 0x00, 0xFF),
		Rainbow.Indigo => new RGBColor(0x4B, 0x00, 0x82),
		Rainbow.Violet => new RGBColor(0x94, 0x00, 0xD3),
		_              => throw new ArgumentException(message: "invalid enum value", paramName: nameof(colorBand)),
	};
</code>
Note that the variable is listed before the switch keyword.
Note that each case statement ends with a comma.
Note that underscore (_) is a wild card match, like asterisk (*) is in a regular expression. This statement is called a "discard".
Note that the first case statement (from top to bottom) that matches the variable will be used, and the rest will be ignored.

#C# 8 Property Pattern

A property pattern lets you match based on a property of the switch variable.

Example:
<code>
public class Address
{
	public string State { get; set; }
}

public static decimal ComputeSalesTax(Address location, decimal salePrice) =>
	location switch
	{
		{ State: "WA" } => salePrice * 0.06M,
		{ State: "MN" } => salePrice * 0.75M,
		{ State: "MI" } => salePrice * 0.05M,
		_ => 0M
	};
</code>

Recommendation: this particular example could be rewritten to use object-oriented principles instead of this new syntax.
<code>
public class State
{
	public string Abbreviation { get; set; }
	public decimal SalesTax { get; set; }
}

public class Location
{
	public State State { get; set; }
}

public static decimal ComputeSalesTax(Address location, decimal salePrice) =>
	salePrice * location.State.SalesTax;
</code>

<code>
if(record.Customer is { Employed:true }) {
	//if record.Customer.Employed == true
	//can be used for checking multiple properties at once
}
</code>

#C# 8 Tuple Pattern

You can use tuples to pass multiple variables into one switch statement.

Example:
<code>
public static string RockPaperScissors(string first, string second)
	=> (first, second) switch
	{
		("rock", "paper") => "rock is covered by paper. Paper wins.",
		("rock", "scissors") => "rock breaks scissors. Rock wins.",
		("paper", "rock") => "paper covers rock. Paper wins.",
		("paper", "scissors") => "paper is cut by scissors. Scissors wins.",
		("scissors", "rock") => "scissors is broken by rock. Rock wins.",
		("scissors", "paper") => "scissors cuts paper. Scissors wins.",
		(_, _) => "tie"
	};
</code>

#C# 8 Positional Patterns

This requires that the Type has an accessible Deconstruct method that converts it into a Tuple.

Example:
<code>
public class Point
{
	public int X { get; set; }
	public int Y { get; set; }
	
	public Point(int x, int y)
	{
		X = x;
		Y = y;
	}
	
	public void Deconstruct(out int x, out int y)
	{
		(x, y) = (X, Y);
	}
}

public enum Quadrant { Unknown, Origin, One, Two, Three, Four, OnSomeBorder }

static Quadrant GetQuadrant(Point point) => 
	point switch
	{
		(0, 0) => Quadrant.Origin,
		var (x, y) when x > 0 && y > 0 => Quadrant.One,
		var (x, y) when x < 0 && y > 0 => Quadrant.Two,
		var (x, y) when x < 0 && y < 0 => Quadrant.Three,
		var (x, y) when x > 0 && y < 0 => Quadrant.Four,
		var (_, _) => Quadrant.OnSomeBorder,
		_ => Quadrant.Unknown
	};
</code>
The Point deconstructor is used implicitly to pass a tuple into the Switch statement.
The rest is the same as the Tuple Pattern.
