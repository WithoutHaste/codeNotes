##Types

Python is loosely typed: it will automatically determine the variable type based on the value, and the type can change.

Everything in Python is an object, each with an identity, type, and value.
Some objects are mutable (value can be changed), some are immutable (value cannot be changed).

The types generally called "primitives" are all immutable objects in Python: integer, string, boolean, etc.

Collections and user-defined types are all mutable objects: list, set, dictionary, etc.

#Definitions

Integer: a whole number

String: an ordered sequence of characters

Boolean: true or false

List: an ordered sequence of elements (mutable)
can contain different data types

Tuple: an ordered sequence of elements (immutable)
can contain different data types

Set: an unordered collection of unique elements
can contain different data types
Sets can only contain immutable objects - otherwise you get an "unhashable type" error
Sets have length, but not indexes.

Dict: an unordered collection of key/value pairs
can contain different data types

#Get Type

<code>
print(type(12)) #<class 'int'>

print(type(12.56)) #<class 'float'>
print(type(5E22)) #<class 'float'>

print(type(True)) #<class 'bool'>
print(type(False)) #<class 'bool'>

print(type(complex(2,5))) #<class 'complex'>
print(type(2+5J)) #<class 'complex'>

print(type("a")) #<class 'str'>
print(type('a')) #<class 'str'>

print(type(u"a")) #<class 'str'>
print(type(u'a')) #<class 'str'>

print(type((1, "a", True))) #<class 'tuple'>
print(type(1, "a", True)) #<class 'tuple'>

print(type([1, "a", True])) #<class 'list'>

print(type({ "name":"Bob", "degree":"business", "age":23 })) #<class 'dict'>

print(type(range(0,10))) #<class 'range'>
</code>

#Mutable

Mutable Types: List, Set, Dict

Immutable Types: Integer, Float, Complex, Boolean, String, Tuple, Frozenset

#Coversions

<code>
ascii(x)   #returns string representation of object?
bin(x)     #int to binary string
bool(x)    #converts to boolean
chr(x)     #int to character
complex(x) #constructs a complex number from arguments
float(x)   #converts int or string to float
hex(x)     #converts int to hexadecimal string
int(x)     #constructs an int from number or string
oct(x)     #converts into to octal string
ord(x)     #converts character to int
repr(x)    #returns string representation of object?
str(x)     #returns string representation of object?
type(x)    #returns the type of the object
</code>

#Iterators

Iterable Types: String, List, Tuple, Dict, Set, Frozenset

Unordered Types: Dict, Set, Frozenset

<code>
all(iterable) #returns True if all elements are True
any(iterable) #returns True if any elements are True

enumerate(iterable) #returns a list of tuples as (index, value)

filter(myFilter, iterable) #returns a list of the elements that passed the filter
#the filter is a function that accepts one element and returns True or False

myIter = iter(collection) #returns an iterable object for the collection
a = next(myIter) #first value
b = next(myIter) #second value

len(collection) #returns the number of elements in the collection

map(myMap, iterable) #applies a function to each element of a collection and returns a list of the results
#the map is a function that accepts one element and returns any value

reversed(iterable) #returns new collection in the reversed order
sorted(iterable)   #returns new collection in the sorted order

zip(iterableA, iterableB, ...) #returns a list of tuples made up of one element from each provided collection
a = ["A","B","C"]
b = [1,2,3]
c = zip(a, b) #equals [("A",1),("B",2),("C",3)]

</code>

#Sequence Types

string, list, tuple, range, buffer, unicode string

Declarations:
<code>
	stringA = "abc"
	stringB = 'abc'
	stringRaw = r'\a\b\c' #"\a\b\c"

	tupleA = (1, 'a', True)
	#parentheses are optional
	tupleB = 1, 'a', True 
	#an empty tuple requires parentheses
	tupleC = ()
	#a single element tuple requires parentheses and a comma
	#or it will be interpreted as the simple type (int, in this case)
	tupleD = (1, )

	listA = [1, 'a', True]
	listB = []
	
	unicodeA = u"abc"
	unicodeB = u'abc'
	
	#buffer objects are not directly supported, they are returned by some functions
	
	#range objects are not directly supported, they are returned by the "range()" function
</code>

String escape characters:
\n newline
\t tab horizontal
\\ backslash
\' single quote
\" double quote

#String, List, Tuple

Operators:
<code>
	if element in sequence:
		print(True)
	if "out" in "without":
		print(True)
	if 2 in [1,2,3]:
		print(True)
		
	if element not in sequence:
		print(False)
		
	concatA = sequenceA + sequenceB
	concatB = sequenceA sequenceB

	#concatenate x shallow copies of sequence together
	repeatedA = sequenceA * count
	repeatedB = count * sequenceB
	
	#get ith element, 0-based index
	elementA = sequence[i]
	
	#get ith through (j-1)th elements in a new sequence
	sliceA = sequence[i:j]
	
	#get ith through (j-1)th elements, with steps of k
	sliceB = sequence[i:j:k]
	
	length = len(sequence)
	
	minElement = min(sequence)
	
	maxElement = max(sequence)
</code>

Indexing:
<code>
	#0 origin
	s = "abcdefg"
	print(s[0]) #"a"
	print(s[-1]) #"g"
</code>

Slice:
<code>
x = "0123456789"

 #boundaries default to start and end of sequence

print(x[2:5]) #234
print(x[-2:-5]) #prints empty line, cannot reverse a string this way
print(x[::-1]) #9876543210 #this is how you reverse a string
print(x[-5:-2]) #567

print(x[2:]) #23456789
print(x[:5]) #01234

print(s[:]) #"abcdefg" #makes a shallow copy of the sequence
</code>

Slice - third optional param is "stride" - how many characters to increment on each step
<code>
print(x[2::1]) #2345678
print(x[2::2]) #2468
print(x[2::3]) #258
print(x[2::-1]) #210 - went backward and stopped on its own
print(x[2:5:-1]) #prints empty line
</code>

Slice Assignment:
<code>
x = "0123456789"
 #slice assignment is like deleting, then inserting
s[2:4] = "123456"
print(s) #"ab123456efg"
</code>

Slice with step or stride:
<code>
s = "abcdefg"
print(s[0:5:1]) #"abcde"
print(s[0:5:2]) #"ace"
print(s[0:5:3]) #"ad"

print(s[::-1]) #"gfedcba" #reverses the sequence
print(s[4:1:-2]) #"ec"
</code>

#Numbers

Number types are split into integers, floating point (fractions), and complex (imaginary).
Booleans are a subtype of integer.

Number types are created with numeric literals.

Complex numbers are in the form A+Bi where i is the imaginary number.
Python uses j instead of i, so the form is A+Bj.
<code>
x = 3+4J
y = 3+4j
z = complex(3,4)
</code>

Scientific numbers can be defined in the form nEm or nem.
<code>
x = 5E244
y = 5e244
</code>

Binary (digits 0-1):
<code>
x = 0B100
y = 0b100
z = 4
</code>

Octal (digits 0-7):
<code>
x = 0O100
y = 0o100
z = 64
</code>

Hexadecimal (digits 0-F):
<code>
x = 0X100
y = 0x100
z = 256
</code>

#Set

Operators
<code>
x = {1, 2, 3}
y = {2, 3, 4}

print(x - y) #{1}

print(x | y) #{1, 2, 3, 4} #x + y is not valid syntax

print (x & y) #{2, 3}

print(x ^ y) #{1, 4}
</code>

Add - add a value to the set
If the value is already in the set, there is no error
<code>
x = {1, 2, 3}
x.add(5)
print(x) #{1, 2, 3, 5} #order may vary
</code>

Update - add each value in the iterable to the set
<code>
x = {1, 2, 3}
x.update([5, 6, 7, 7, 7])
print(x) #{1, 2, 3, 5, 6, 7} #order may vary
</code>

Remove - removes one value from the set
Throws a KeyError if the value is not in the set
<code>
x = {1, 2, 3}
x.remove(2)
print(x) #{1, 3}
</code>

Copy - create a new set with all the same values in it
<code>
x = {1, 2, 3}
y = x.copy()
print(y) #{1, 2, 3}
</code>

#Frozenset

A frozenset is an immutable set.  You'll need this if you want to create a set of sets; the inner sets will have to be frozensets.

<code>
a = set([1,2,3])
b = set([4,5,6])

a2 = frozenset(a)
b2 = frozenset(b)

c = set([a2, b2])
</code>

#Dictionary

A dictionary is an unordered list of key:value pairs.
Dictionaries are mutable.

Keys must be unique within the dictionary.
Keys can be any immutable type.
The keys are used as indexes to access the values.

<code>
x = { "name":"Bob", "degree":"business", "age":23 }

print(x) #{'name': 'Bob', 'degree': 'business', 'age': 23}
print(x["name"]) #Bob

z = {} #empty dictionary
</code>

Assignment
<code>
x = { "name":"Bob", "degree":"business", "age":23 }
x["age"] = 45
print(x["age"]) #45
</code>

In - returns boolean for whether a given key is in the dictionary
<code>
x = { "name":"Bob", "degree":"business", "age":23 }
if "name" in x:
	print(x["name"])
</code>

Keys - returns an iterable view of the dictionary keys
<code>
x = { "name":"Bob", "degree":"business", "age":23 }
for key in x.keys():
	print(key, "=", x[key])
</code>

You cannot edit a dictionary while iterating over the key view. You have to create a copy of the iterable first.
<code>
x = { "name":"Bob", "degree":"business", "age":23 }
keys = list(x.keys())
for key in keys:
	if x[key] == 23:
		del x[key]
</code>

Values - returns an iterable view of the dictionary values
<code>
x = { "name":"Bob", "degree":"business", "age":23 }
for value in x.values():
	print(value)
</code>

Delete - remove a key and its value from a dictionary
<code>
x = { "name":"Bob", "degree":"business", "age":23 }
del x["degree"]
print(x) #{ "name":"Bob", "age":23 }
</code>

Pop - returns a value from a key, or a default if the key doesn't exist; also deletes the key:value
<code>
x = { "name":"Bob", "degree":"business", "age":23 }
y = x.pop("degree", None)
print(x) #{ "name":"Bob", "age":23 }
print(y) #"business"
</code>

Zip - create a dictionary from a list of keys and a list of values
<code>
	x = dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))
	#equivalent to {'a':1, 'b':2, 'c':3, 'd':4, 'e':5 }
</code>

#None

None is a singularity object, so all Nones are equal.

None is always returned from functions that don't return anything.

None's truth value is False.

You can use None anywhere it makes sense to you.

<code>
x = None
</code>

#Conversions

Int - convert string to integer; throws an error if conversion is not possible
<code>
x = int("45") #45
</code>

Str - convert anything to a string
<code>
x = str(359) #"359"
</code>

Ord - convert character to ascii code integer
<code>
x = ord('a')
print(x) #97
</code>

Chr - convert integer ascii code to character
<code>
x = chr(97) 
print(x) #'a'
</code>

Bin - convert integer to binary (base 2) form
<code>
x = bin(10)
print(x) #"0b1010"
</code>

#Maximums

Python has not maximum size on integers.

Collections have a maximum size.
<code>
import sys
print(sys.maxsize)
</code>

#DateTime

<code>
import datetime

datetime_string = "Jun 28 2018 7:40AM"
datetime_parsed = datetime.datetime.strptime(datetime_string, "%b %d %Y %I:%M%p")

datetime_string = "2018-06-29 08:15:27.243860"
datetime_parsed = datetime.datetime.strptime(datetime_string, "%Y-%m-%d %H:%M:%S.%f")

print('Date:', datetime_parsed.date())
print('Time:', datetime_parsed.time())
print('Date-time:', datetime_parsed)

print('My format:', datetime_parsed.strftime("%Y-%m-%d"))
</code>

%Y year in 4 digits
%m month
%d day of month
%H hour in 24 hour cycle
%M minutes
%S seconds
%f microseconds
![full datetime documentation](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)

#Duck Typing

"if it looks like a duck and quacks like a duck..."

Because Python is dynamically typed, you can do this:
<code>
class Duck:
	def quack(self):
		print "Quack!"
	
class Goose:
	def quack(self):
		print "I am also a duck :)"
		
def make_some_noise(animal):
	animal.quack();
	
make_some_noise(Duck()); //prints Quack!
make_some_noise(Goose()); //prints I am also a duck :)
</code>
These classes are not explicitly related to each other, but can be used interchangeably as long as they implement the same method names.

#Optional Type

aka Typing Hints
You can specify which type a method/function parameter expects.
