##Command Prompt (CLI)

#Help

list out all options
<code>
go
</code>

print the version number
<code>
go version
</code>

display help files for the CLI
<code>
go help test
go help {etc}
</code>

display documentation from a package (based on the comments)
<code>
go doc {qualified name}
go doc json.Decoder
go doc json.Decoder.Decode
</code>

#Module

initialize a module with a "go.mod" file
<code>
go mod init {name of module}
</code>
if you want the module to retrieve files from git
<code>
go mod init github.com/pluralsight/webservice
</code>

#Run

compile and run the selected file
<code>
go run {main filename}
go run main.go
go run {module name}
go run .
</code>
the compiled code is stored in a temp location, it is not left in the current folder

#Build

compile and keep the result, also run
<code>
go build .
</code>
the executable file defaults to {current_folder_name}.exe
the executable is specific to the OS it was compiled on

#Test

run tests
<code>
//run all tests in current and descendant directories
go test ./...

//run all tests in current directory
go test
go test .

//run some package's tests
go test {package_name} {package_name} {etc}
</code>
option "-v" for verbose
option "-run {regexp}" for only test names that match the pattern
option "-cover" for a code coverage report
option "-coverprofile {filename}" to save coverage report to the file (read it with "go tool cover -func {filename}"
option "-bench" to include benchmark tests in the run
option "-bench -benchtime 10s" to include benchmark tests and set the time for them to run
see "go help testflag" for all options

<code>
go test -run=nope ./...
</code>
I think the "-run=" accepts regex, so this is just a piece of text that isn't matching anything
