##Errors

#Try Catch

<code>
try:
	print("hey")
except:
	print("error")
	
try:
	x = input("a number:")
except IOError:
	print("IO Error")
except TypeError as e:
	print("TypeError: " + str(e)) #prints the error message
except:
	print("some other error")
</code>

#Raise Error

<code>
raise ValueError("message")
</code>

Convention says do not raise generic Exception

#Error Types

IOError, ValueError, ImportError, EOFError, KeyboardInterrupt

#Custom Errors

"Errors" all inherit from the base "Exception" class.
The naming convention is that all errors/exception Types end with "Error".

Define a custom error type:
<code>
class MyError(Exception):
	def __init__(self, expression, message):
		self.expression = expression
		self.message = message
</code>