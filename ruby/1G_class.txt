##Class

#Class

"data members" include characteristics and methods

<code>
class Person
	#characteristics
	@@lucky_number = 3
	@@name = 'jane'
	#methods
	def say_hello()
		print 'hello'
	end
end
</code>

create an instance of a class (create an object)
<code>
class Person
end

jane = Person.new
</code>
the "new" method is automatically available on all classes

method invocations only require parentheses when there are arguments
<code>
class Person
	def initialize(name, lucky_number)
		@name = name
		@lucky_number = lucky_number
	end
	def display()
		puts "name: %s, lucky: %d" % [@name, @lucky_number]
	end
end

jane = Person.new('jane', 3)
jane.display
</code>

#Initialize Method

initialize is run each time a new instance is created

<code>
class Person
	attr_reader :name #not sure yet if this is required for internal reads of the data

	def initialize(name)
		@name = name
	end
	
	def print_name()
		puts @name
	end
end
</code>

#Instance Variables

instance variables are scoped to one instance of a class

<code>
attr_accessor :my_instance_variable

@my_instance_variable = value

puts @my_instance_variable
</code>

#Accessors

accessors are for reading and writing to an object's instance variables

attr_reader creates public "getter" methods

attr_writer creates public "setter" methods

attr_accessor creates public "getter" and "setter" methods

#Root Class

all classes inherit from the class "Class"

#Reflection

<code>
my_object.class #returns the Class type
my_object.methods #returns a list of Methods
</code>

