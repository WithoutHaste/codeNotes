##Rough Definitions

#System vs Application

An application (in this distinction) is a single executable running on a single machine. It is not the responsibility of the application to solve connectivity problems, such as losing access to a storage location.

A system include multiple executables on (possibly) multiple machines. The system is responsible for solving its own connectivity problems.

Ex: a web page is a system because it involves the server, the client's machine and browser, and probably at least one database.

#RPC vs Queue

RPC stands for Remote Procedure Call, such as a request/response. They are synchronous

Message queues are asynchonous.

#Loosely Coupled Services

Services that communicate with the client or with each other using a set of industry-accepted standards and protocols.

#Service

A service is a collection of operations (units of responsibility).
The service is the point of entry for the client.
Services are secure. (They handle any required internal security. They also inherently limit client access to their system.)
Service operations always leave the system in a consistent (valid) state.
Services handle faults/exceptions gracefully.
The client is not exposed to any details of how an operation is fulfilled.
The client is protected from code volatility (likelihood of change).
Service calls are (almost always) stateless.

A service is a logical representation of a repeatable business activity with a specific outcome. It is self-contained. It is a black box to programs that consume it.

A service can be composed of several other services.

#Service Oriented Application

An application whose volatile areas are abstracted, or wrapped, in a simple service call that is exposed to the client.

Each service call is called an "operation".

#Transaction

A set of actions that must all succeed together or all fail together.