## Server

# Troubleshooting

Turning services on and off
<code>
//get status
sudo systemctl status {service name}

//start, stop, restart
sudo systemctl start {service name}
sudo systemctl stop {service name}
sudo systemctl restart {service name}
</code>

What version of the server is running?
<code>
lsb_release -a
</code>

Get useful log info about a service
<code>
journalctl -xe | grep {service name}
</code>
ex: "journalctl -xe | grep mssql"

what version of a library is installed?
<code>
ldconfig -p | grep {package name}
</code>

search everywhere for where a particular library version is installed
<code>
find / -name {library}-{version} 2>/dev/null
</code>
Ex: find / -name liblber-2.4.so.2 2>/dev/null

# Virtual Hosting

Virtual hosting is hosting multiple domain names from one IP address. Apache's virtual host directs requests to different folders, based on the domain name.

Apache's top-level directory for websites is "/var/www"
Create subdirectories here for each domain name. Include a "public_html" directory nested in each one.

Set the ownership on the "public_html" directory to the user who owns that website.
<code>
sudo chown -R {user}:{group} /var/www/example.com/public_html
</code>

Make sure the new directories are reable by all users. This may already be set correctly.
<code>
sudo chmod -R 755 /var/www
</code>

Upload an html file to the public_html directory for testing.

Make a copy of "/etc/apache2/sites-available/000-default.conf" for each domain name.
<code>
sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf
</code>
Edit the file with this template
<code>
<VirtualHost *:80>
	ServerAdmin admin@example.com
	ServerName example.com
	ServerAlias www.example.com
	DocumentRoot /var/www/example.com/public_html
	ErrorLog ${APACHE_LOG_DIR}/error.log
	CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
</code>

Enable the virtual hosts (creates symlinks with sites-enabled)
<code>
sudo a2ensite example.com.conf
</code>

Restart Apache for the changes to take effect
<code>
sudo service apache2 restart
 #or
sudo systemctl reload apache2
</code>

Disable the virtual host
<code>
sudo a2dissite example.com.conf
</code>

To test this setup, you can hard-code your local computer's host file. (This is not referring to the linux server, but to the computer you will test with.)
- Linux
  - edit "/etc/hosts" to include a line like "111.111.111.111 example.com"
- Windows
  - run notepad as Administrator to open file
  - edit "c:\windows\system32\drivers\etc\hosts" to include a line like "111.111.111.111 example.com"

# ASP.Net Core Hosting

(1)
One-time setup: register Microsoft key and feed
<code>
wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.asc.gpg
sudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/
wget -q https://packages.microsoft.com/config/ubuntu/18.04/prod.list 
sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list
sudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg
sudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list
</code>
Install .Net Core runtime
<code>
sudo apt-get install apt-transport-https
sudo apt-get update
sudo apt-get install aspnetcore-runtime-2.1
</code>
That's it. You do not need the SDK on a production server.
Verify installation
<code>
dotnet --info
dotnet --list-sdks
dotnet --list-runtimes
</code>

(2)
Deploy the app:
- run a Release build
- copy the build files (found in /bin) to the appropriate folder on the server
- run the app with
<code>
dotnet My_App.dll
</code>
- navigate to the app in browser on the local server machine at "http://{server_address}:{port}"

(3)
Setup the app to run and be monitored in the background
Install Supervisor
<code>
sudo apt-get install supervisor
</code>
Initialize folder "/var/aspnetcore" for all .Net Core apps
<code>
sudo mkdir /var/aspnetcore/{my_app}
</code>
Grant access to the user for this site
<code>
sudo chown -R {user}:{group} /var/aspnetcore/{my_app}
</code>
Copy your build (/bin) files into this directory.

Init supervisor conf file
<code>
sudo vim /etc/supervisor/conf.d/{my_app}.conf
</code>
<code>
[program:{process_name}]
command=/usr/bin/dotnet /var/aspnetcore/{my_app}/{my_app}.dll --urls "http://*:5000"
directory=/var/aspnetcore/{my_app}
autostart=true
autorestart=true
stderr_logfile=/var/log/{my_app}.err.log
stdout_logfile=/var/log/{my_app}.out.log
environment=ASPNETCORE_ENVIRONMENT=Production,CONNECTIONSTRINGS__DEFAULT="{connection_string}"
user={app_user}
stopsignal=INT
</code>
Note that "environment" is used to set environment variables for this application.
<code>
environment=KEYA=valA,KEYB=valB
</code>
The values can optionally be enclosed in double quotes ("")

Start Supervisor
<code>
sudo service supervisor start
</code>
Restart Supervisor
<code>
sudo supervisorctl reload
</code>
Watch Supervisor logs to see app startup
<code>
sudo tail -f /var/log/supervisor/supervisord.log
sudo tail -f /var/log/{my_app}.out.log 
</code>

?? supervisor log says it is running as root because no user was specified, but i did specify user ??

!! it works! I can reach the web api from another computer on port 5000 !

ok, the service part stopped working after rebooting the server
stay calm
the port 80 static html parts are still working
- the Supervisor app is in a start/die loop on "address 5000 already in use"

Install Net Tools to see what is using that port
<code>
sudo apt install net-tools

netstat -ltnp | grep :5000
</code>
It says "tcp6" which made me think of the nginx configuration that included ip4 and ip6
- manually stopped nginx
- confirmed service is now reachable from another computer on port 5000
- removing the port 5000 config from nginx
- restarted nginx, confirmed 5000 service is still available externally
- trying a reboot again
- hmm, now port 80 sites AND 5000 service are having trouble
  - shit I can't connect to my server
  - oh shit
  - ok, nobody panic, I manually turned it off and on again and everything is working
- trying system reboot again
  - everything is still working
  
# Apache2 as Reverse Proxy to Supervisor

Supervisor hosts locally only
Example /etc/supervisor/conf.d/{sitename}.conf
<code>
[program:{sitename}]
command=/usr/bin/dotnet /var/aspnetcore/{sitename}/{program}.dll --urls "http://127.0.0.1:5100"
directory=/var/aspnetcore/{sitename}
autostart=true
autorestart=true
stderr_logfile=/var/log/{sitename}.err.log
stdout_logfile=/var/log/{sitename}.out.log
environment=ASPNETCORE_ENVIRONMENT=Production
user=abound
stopsignal=INT
</code>

Apache2 listens on port 80
Example /etc/apache2/sites-available/{sitename}.conf
<code>
<VirtualHost *:80>
    ServerName {domainname}
    ProxyPreserveHost On
    ProxyPass / http://127.0.0.1:5100/
    ProxyPassReverse / http://127.0.0.1:5100/
    ErrorLog /var/log/apache2/{sitename}-error.log
    CustomLog /var/log/apache2/{sitename}-access.log common
</VirtualHost>
</code>

# Directory Browsing

Directory browsing is when the web user can view the list of files in a directory on your server.

To disable directory browsing for all sites hosted on the server:
- open "/etc/apache2/apache2.conf"
- change line "Options Indexes FollowSymLinks" to "Options FollowSymLinks"
- restart apache2 service for changes to take effect

# SSL Certificate

Instructions for Ubuntu + Apache2

1) Generate a Private Key file and CSR (Certificate Signing Request)
- command prompt: sudo openssl req -new -newkey rsa:2048 -nodes -keyout {name}.key -out {name}.csr

Place these files in a location that only Root can access.

The {name}.key file is the private key file.
The {name}.csr file is the certificate signing request. This is used to order an SSL Certificate from a signing authority, and to encrypt messages that only the private key can decrypt.

When asked for the Common Name, enter the fully qualified Domain Name.
Ex: google.com
Ex: *.google.com to include all subdomains

Country Code list: https://www.digicert.com/kb/ssl-certificate-country-codes.htm

**instructions paused, looking at certbot option

# Certbot

https://certbot.eff.org/

easy generation and installation of certificates, with auto-renewal

# New Hard Drive

mostly followed this
!![Installing A New Hard Drive](https://help.ubuntu.com/community/InstallingANewHardDrive)

to get a list of the devices
<code>
sudo lshw -C disk
</code>
"-C disk" will filter by the description, if you don't see your disk then look without the filter as well
this will give you the "/dev/{device}" label

command line to partition disk
<code>
sudo parted /dev/{device}
</code>
follow the rest of the instructions from the webpage for this part

then command line formatting
<code>
sudo mkfs -t ext4 /dev/{device}
<code>

find the uuid of the device, which is more consistent after reboots than the "/dev/{device}" name
<code>
sudo blkid
</code>

create a mount point
add a directory under "/media" with a name of your choice
<code>
sudo mkdir /media/{name}
</code>

configure the drive to be mounted on each server startup
<code>
sudo vim /etc/fstab
</code>
and add a line like
<code>
/dev/disk/by-uuid/{uuid} /media/{name} ext4 defaults 0 2
</code>
the "2" here tells it to run a disk check on each server start, you can set to "0" to skip that

reboot server
