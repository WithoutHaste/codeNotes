##Tuple

C# 4 and above.

A tuple is a data structure containing an ordered sequence of values of (possibly) different types.
Tuples are used where you need a new Type, but don't want to define a new Type.

Tuples can hold up to 8 elements.
Tuples are immutable.
Tuples are references types.

#Accessing

<code>
Tuple<int, string, string> person = new Tuple<int, string, string>(1, "Steve", "Smith");

var person = Tuple.Create(1, "Steve", "Smith");

Console.WriteLine(person.Item1); //outputs 1
Console.WriteLine(person.Item2); //outputs Steve
</code>

The 8th element is saved (by default) as a tuple.
<code>
var nums = Tuple.Create(1, 2, 3, 4, 5, 6, 7, 8);

Console.WriteLine(nums.Item7); //outputs 7
Console.WriteLine(nums.Rest); //outputs (8)
Console.WriteLine(nums.Rest.Item1); //outputs 8
</code>

You can nest tuples inside tuples to store more than 8 elements.
Recommendation: don't. Create a proper Type for this data.

#Parameter

You can have tuple parameters.

<code>
public void MyMethod(int x, Tuple<int, string, string> y)
{
}
</code>

#Return

You can return tuples.
This is a way to return multiple values without a specific Type, nor by using out, nor ref.

<code>
var x = MyMethod();

public Tuple<int, string, string> MyMethod()
{
	return Tuple.Create(1, "Steve", "Smith");
}
</code>

#Deconstruct

This is called deconstructing a tuple.
It breaks a tuple's values into separate variables.

<code>
var (age, name) = MyMethod();

(int age, string name) = MyMethod();

int age;
string name;
(age, name) = MyMethod();
</code>

As of C# 7, you can ignore some tuple elements while destructuring by using the "discard" operator "_".
<code>
public Tuple<int, string, int, string, string> MyMethod()
{
	return (1, "TX", 23, "Engineer", "Smith");
}

var (_, _, age, _, name) = MyMethod();
</code>

As of C# 7.1, tuple element names will default to the names of variable arguments:
<code>
int age = 23;
string name = "Smith";
var person = (age, name);
Console.WriteLine(person.name); //outputs Smith
</code>

#C# 7 ValueTuple

A ValueTuple is a value-type Tuple.

Support named members:
<code>
(int age, string name) person = (23, "Smith");

var person = (age: 23, name: "Smith");

Console.WriteLine(person.name); //outputs Smith
</code>
Unnamed members can still be accessed by ".Item1" etc.

Return:
<code>
static (int, string) MyMethod()
{
	return (23, "Smith");
}

var (age, name) = MyMethod();

Console.WriteLine(name); //outputs Smith
</code>
<code>
static (int age, string name) MyMethod()
{
	return (23, "Smith");
}

var person = MyMethod();

Console.WriteLine(name); //outputs Smith
</code>