##Configuration

#AppSettings

Add an App.Config file to the project.  Add settings like this.
<code>
<configuration>
	<appSettings>
		<add key="keyA" value="valueA" />
		<add key="keyB" value="valueB" />
	</appSettings>
</configuration>
</code>

Access it like so.
<code>
using System.Configuration; //install package System.Configuration.ConfigurationManager

public class MyClass
{
	public string KeyA
	{
		get
		{
			return ConfigurationManager.AppSettings["KeyA"];
		}
	}
}
</code>

One way to have different settings for Debug vs Release:
1. Add to the project a configuration-specific file (*.csproj file)
<code lang="xml">
  <ItemGroup>
    <None Include="App.config" />
    <None Include="App.Debug.config" />
    <None Include="App.Release.config" />
  </ItemGroup>
</code>
2. Add an event at compilation time to copy the right config file over "App.config" (*.csproj file)
<code lang="xml">
  <!-- copy the correct config file into the correct location before compilation occurs -->
  <Target Name="SetAppConfig" BeforeTargets="Compile">
    <Copy SourceFiles="App.Debug.config" DestinationFiles="App.config" OverwriteReadOnlyFiles="true" Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' " />
    <Copy SourceFiles="App.Release.config" DestinationFiles="App.config" OverwriteReadOnlyFiles="true" Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' " />
  </Target>
</code>

#Add Reference

If you need to add a library reference in a config, do this:
<code lang="xml">
<?xml version="1.0"?>
<configuration>
	<system.web> <!--Web.config example-->
		<compilation debug="true" targetFramework="4.5.2">
			<assemblies>
				<add assembly="System.ServiceModel.Activations"/><!--new reference-->
			</assemblies>
		</compilation>
	</system.web>
</configuration>
</code>