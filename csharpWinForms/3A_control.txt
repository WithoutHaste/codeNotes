##Controls

#Anchor vs Dock

"Anchor" refers to the position a control has relative to the edges of the form. A textbox, for example, that is anchored to the left edge of a form will stay in the same position as the form is resized.

Anchoring a control to its parent control ensures that the anchored edges remain in the same position relative to the edges of the parent control when the parent control is resized.

"Docking" refers to how much space you want the control to take up on the form. If you dock a control to the left of the form, it will stretch itself to the height of the form, but its width will stay the same. 

The Anchor and Dock properties are mutually exclusive. Only one can be set at a time, and the last one set takes precedence.

AnchorStyles: None, Top, Bottom, Left, Right
<code>
Control.Anchor = AnchorStyles.Top | AnchorStyles.Left;
</code>

DockStyle: None, Top, Bottom, Left, Right, Fill
<code>
Control.Dock = DockStyle.Fill;
</code>

#Properties

Basic properties:
<code>
Control.BackColor = Color.Red;
Control.Cursor = Cursors.Hand;
Control.BackgroundImage = Image.FromFile(filename);
Control.BackgroundImageLayout = ImageLayout.Stretch;
</code>

#Scrolling

If you set Control.AutoScroll=true, you can still manually set the scroll position with Control.AutoScrollPosition. Set it to a Point such that (0,0) is the top-left corner.

#Transparent Controls

WinForms supports controls with transparent background such that the parent control will fill in the missing space.
That means controls can only be transparent is regards to their parent, not in regards to other controls they overlap.

Note: buttons cannot have transparent backgrounds this way.

<code>
using System.Drawing;
using System.Windows.Forms;

public class MyControl : UserControl
{
	public MyControl()
	{
		SetStyle(ControlStyles.SupportsTransparentBackColor, true);
		SetStyle(ControlStyles.Opaque, true);
		this.BackColor = Color.Transparent;
	}
}
</code>

Alternative is to set the Control.Region to only contain non-transparent parts of the control. Note that areas outside of Region will not react to user interaction.
<code>
using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

public class RoundedCorners : UserControl
{
	private int radius = 20;

	protected override void OnSizeChanged(EventArgs e)
	{
		base.OnSizeChanged(e);
		this.RecreateRegion();
	}

	private void RecreateRegion()
	{
		Rectangle bounds = ClientRectangle;
		regionPath = GetRoundedRectangle(bounds, this.Radius);
		this.Region = new Region(regionPath);
		this.Invalidate();
	}

	private GraphicsPath GetRoundedRectangle(Rectangle bounds, int radius)
	{
		GraphicsPath path = new GraphicsPath();
		path.AddArc(bounds.X, bounds.Y, radius, radius, 180, 90);
		path.AddArc(bounds.X + bounds.Width - radius, bounds.Y, radius, radius, 270, 90);
		path.AddArc(bounds.X + bounds.Width - radius, bounds.Y + bounds.Height - radius,
					radius, radius, 0, 90);
		path.AddArc(bounds.X, bounds.Y + bounds.Height - radius, radius, radius, 90, 90);
		path.CloseAllFigures();
		return path;
	}
}
</code>

Note: When building a Control.Region, all coordinates are relative to the top-left corner of the control being (0,0).

Note: Region.Union(Region) does not work if one of the Regions is empty. And trying to set Control.Region to an empty Region is ignored.
