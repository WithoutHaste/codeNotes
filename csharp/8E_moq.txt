##Moq

#About

Moq is a popular mocking framework for C#. You can install Moq (and its dependencies) with the NuGet Package Manager.

"Mocking" means creating a derived class of the class you want to test, and overriding its methods to respond the way you want. This is used to setup test scenarios without actually setting up your end-to-end system for each scenario. This allows you to test each part of your system in isolation.

If you find yourself mocking a normal class, you should probably refactor so the class implements an interface and you are mocking the interface. See "Dependency Inversion" for more.

A thought I had was, if I have an Interface already, why use Moq? Why not just implement a test version of the Interface?
Answer: With Moq, all the test implementation logic is contained in the test case, and you can easily use a different implementation for each test.

#Basic Example

<code>
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;

[TestClass]
public class MyClass
{
	[TestMethod]
	public void MyTest()
	{
		Mock<IMyInterface> mock = new Mock<IMyInterface>();
		//setup the mock here
		//run test here, using mock.Object
		//use verify methods on mock, and/or use asserts
		Assert.AreEqual(mock.Object.Property1, "value");
	}
}
</code>

#Options

Strict Moq will raise an exception for anything invoked in the mock that was not setup first:
<code>
Mock<IMyInterface> mock = new Mock<IMyInterface>(MockBehavior.Strict);
</code>

Invoke base class implementation if no expectation was setup to override the member.
See "Partial Mocks".
This is required for mocking Web/Html controls in System.Web.
<code>
Mock<IMyInterface> mock = new Mock<IMyInterface>() { CallBase = true };
</code>

If some member is called that was not setup, automatically create and return a new Mock for that member. This is default recursive Mocks.
<code>
Mock<IMyInterface> mock = new Mock<IMyInterface>() { DefaultValue = DefaultValue.Mock };
</code>

#Setup Methods

Setup methods will overwrite each other. The last general setup of method A will overwrite all previous setups of method A.
You are allowed to have multiple setups for method A provided they all have different parameter specifications.
If you have some setups for method A with variable specifications, but they don't cover all possible eventualities, the rest of the possible calls will default to returning null.

Method with parameter and return value:
<code>
mock.Setup(i => i.Method("parameter")).Returns("result");
</code>

Method that will return each value, in order, as it is called multiple times:
<code>
mock.SetupSequence(i => i.Method()).Returns("resultA").Returns("resultB").Returns("resultC").Throws(new InvalidOperationException());

//newer version of mock
mock
	.SetupSequence(i => i.Method(It.IsAny<string>(), It.IsAny<int>()))
	.Returns((string s, int i) => {
		if(s == "abc")
			return 5;
		if(s != "def" && 1 < 10)
			return 15;
		return -1;
	});
</code>

Method with an out parameter and a return value:
<code>
int outParameter = 0;
mock.Setup(i => i.Method("parameter", out outParameter)).Returns("result");

//async
mock.Setup(i => i.Method("parameter", out outParameter)).Returns(Task.FromResult("result"));
</code>

Method with a ref parameter:
<code>
int refParameter = 0;
mock.Setup(i => i.Method("parameter", ref refParameter));
</code>

Throw an exception:
<code>
mock.Setup(i => i.Method("parameter")).Throws<InvalidOperationException>();

mock.Setup(i => i.Method("parameter")).ThrowsAsync(new Exception());
</code>

Accept any parameter of the correct data type:
<code>
mock.Setup(i => i.Method(It.IsAny<string>()));
</code>

Accept any parameter that is passed by ref: (As of Moq 4.8)
<code>
mock.Setup(i => i.Method(ref It.Ref<MyType>.IsAny));
</code>

With argument constraints:
Accept any parameter by type and condition:
<code>
mock.Setup(i => i.Method(It.Is<int>(i => i % 2 == 0)));
</code>

Accept any parameter by type and range:
<code>
mock.Setup(i => i.Method(It.IsInRange<int>(0, 10, Range.Inclusive)));
</code>

Accept any parameter by regular expression:
<code>
mock.Setup(i => i.MethodCondition5(It.IsRegex("\s+", RegexOptions.IgnoreCase)));
</code>

Set a "ref" or "out" value:
Use Moq's Callback to set the desired value after the normal method is run.
<code>
public interface IParser
{
    bool TryParse(string value, ref int output);
}

//define a delegate with the same signature as the method under test
delegate void MockTryParseCallback(string value, ref int output);
 
public void TestCase()
{
    var mockParser = new Mock<IParser>();
    mockParser.Setup(x => x.TryParse("255", ref It.Ref<int>.IsAny))
              .Callback(new MockTryParseCallback((string s, ref int output) => output = 255)) //this sets the ref or out value
              .Returns(true);
	// the rest of the test
}
</code>

#Setup Methods with Expressions

Mocking a method that accepts a Func<Expression> and returning a particular value based on the parameter values passed into the expression:
<code>
//example of real method call
string accountId = "a";
string itemId = "b";
MyModel result = await repository.SingleOrDefaultAsync(x => x.AccountId == accountId && x.ItemId == itemId);

//example of mocking the call
string ValidAccountId = "x";
string ValidItemId = "y";
string ValidUserId = "z";
mockRepository
	.Setup(moq => moq.SingleOrDefaultAsync(It.Is<Expression<Func<MyModel, bool>>>(e =>
			e.Compile().Invoke(new MyModel { AccountId = ValidAccountId, ItemId = ValidItemId }))))
	.Returns(Task.FromResult<MyModel>(new MyModel() { UserId = ValidUserId }));
	
//specifies the successful case, where both fields match valid values
//by default, all other cases will just return null
//behavior verified by stepping through test cases
</code>
The default behavior (with no setup) is to return null.
Be aware that doing multiple setups of the same expression method is flaky as hell. Best to do one setup for each test, and as long as you don't get null back, the setup worked.

I've tried this simpler syntax, but it returns null in all cases. Do not use.
<code>
//example of real method call
string accountId = "a";
string itemId = "b";
MyModel result = await repository.SingleOrDefaultAsync(x => x.AccountId == accountId && x.ItemId == itemId);

//example of mocking the call
string ValidAccountId = "x";
string ValidItemId = "y";
string ValidUserId = "z";
mockRepository
	.Setup(moq => moq.SingleOrDefaultAsync(x => x.AccountId == ValidAccountId && x.ItemId == ValidItemId))
	.Returns(Task.FromResult<MyModel>(new MyModel() { UserId = ValidUserId }));
//Do not use. Does not return the specified value.
</code>

#Setup Properties

A property value:
<code>
mock.Setup(i => i.Property1).Returns("value");
</code>

Mock a hierarchy of objects with one command:
<code>
mock.Setup(i => i.Property2.SubProperty3.SubSubProperty4).Returns("value");
</code>

Wait for this value to be set during the test:
<code>
mock.Setup(i => i.Property3 = "value");
</code>

Setup stub: track gets and sets of this property during the test:
<code>
mock.SetupProperty(i => i.Property5);
mock.SetupProperty(i => i.Property5, "defaultValue");
</code>

Setup all stubs: create stubs for all properties at once:
<code>
mock.SetupAllProperties();
</code>

#Verification

Method was not called:
<code>
mock.Verify(i => i.Method("parameter"), Times.Never());
</code>

Method was called at least once:
<code>
mock.Verify(i => i.Method("parameter"), Times.AtLeastOnce());
</code>

Property was got:
<code>
mock.VerifyGet(i => i.Property1);
</code>

Property was set:
<code>
mock.VerifySet(i => i.Property1);
</code>

Property was set to specific value:
<code>
mock.VerifySet(i => i.Property1 = "value");
</code>

Property was set to something in this range:
<code>
mock.VerifySet(i => i.Property1 = It.IsInRange(0, 10, Range.Inclusive));
</code>

No other invocations were made, except those already verified:
<code>
mock.VerifyNoOtherCalls();
</code>

If you get an error about extension methods not being supported, check that you have the right parameters in the Verify(i => i.Method()). If the method signature is not recognized, Moq assumes it is an extension method (which are not supported).

#Errors

Error: "Mock does not contain a definition for Setup".
Solution: use strongly-typed Mock
<code>
//use this
Mock<IMyInterface> mock = new Mock<IMyInterface>();
//instead of this
Mock mock = new Mock<IMyInterface>();
</code>

#Scripts

Tricky mocks I've had to figure out.

To mock returning a Task aka Task<void>:
<code>
mock.Setup(m => m.Method()).Returns(Task.FromResult<object>(null));
</code>

Asp.Net Core MVC: test a Controller Action's use of Headers
<code>
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.AspNetCore.Routing;
using Moq;

//concrete controller
var controller = new MyController();

//mock 
var bearerToken = "bearerToken";
var request = new Mock<HttpRequest>();
request.SetupGet(x => x.Headers["Authorization"]).Returns(bearerToken);
var httpContext = new Mock<HttpContext>();
httpContext.SetupGet(x => x.Request).Returns(request.Object);
var context = new ActionContext(httpContext.Object, new RouteData(), new ControllerActionDescriptor());

controller.ControllerContext = new ControllerContext(context);
//can now run a Controller Action and see what it does with the header
</code>

You cannot mock a System.Net.Http.HttpContent class
But you can create a concrete class using of these subclasses
!![HttpContent Concrete Classes](https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpcontent?view=netcore-3.1)
Ex:
<code>
var myObject = new MyObject();
var httpContent = JsonContent.Create(myObject);
</code>

#Patterns to avoid

Class implements Interface.
In testing, you'll Mock the Interface.
Method on Class makes changes to a reference-type parameter.
So the code works when it is run for real, but the unit test fails because the Mock does not update the reference-type parameter.
