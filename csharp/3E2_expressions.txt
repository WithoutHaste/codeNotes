##Expressions

#Apply Expression to Object

Given an expression that selects a object's field or property
And given the new value to set that field or property to
And given an object
Apply the expression to change the value on the object
<code>
public class UpdateField<T, U>
{
	public Expression<Func<T, U>> Field { get; set; }
	public TField Value { get; set; }

	public UpdateField(Expression<Func<T, U>> field, U value)
	{
		Field = field;
		Value = value;
	}

	public override void Apply(T target)
	{
		var memberSelectorExpression = Field.Body as MemberExpression;
		if (memberSelectorExpression != null)
		{
			var property = memberSelectorExpression.Member as PropertyInfo;
			if (property != null)
			{
				property.SetValue(target, Value, null);
			}
		}
	}
}
</code>

This is called a Member Expression.

Another example:
<code>
//truncate this string based on the length attribute of this property
var myString = "loooooong string".Truncate<MyClass>(x => x.MyProperty);

using System.ComponentModel.DataAnnotations;

public class MyClass
{
	[StringLength(10)]
	public string? MyProperty { get; set; }
}

public static string? Truncate<T>(this string? val, Expression<Func<T, string?>> property)
{
	var propertyInfo = ((MemberExpression)property.Body).Member as PropertyInfo;
	var stringLengthAttribute = propertyInfo!.GetCustomAttributes(typeof(StringLengthAttribute), false).Cast<StringLengthAttribute>().SingleOrDefault();
	var maxLength = stringLengthAttribute.MaximumLength;
	if(val == null || val.Length <= maxLength) return val;
	return val[..maxLength];
}
</code>