##MSTest Testing

General setup
<code>
using Microsoft.VisualStudio.TestTools.UnitTesting; //from Microsoft.VisualStudio.QualityTools.UnitTestFramework.dll

[TestClass]
public class TestClass
{
	[TestMethod]
	public void TestMethod()
	{
		//assign
		//act
		//assert
	}
}
</code>

#Assert

There are many built-in Assert statements.

Any Assert can be given a last string parameter. This string message will be appended to the default error message if the Assert fails.

#Setup

It appears that test cases can be run in any order, regardless of how they are grouped in classes, 
so don't rely on all methods in one class being run before the next class.

This initialize method is called once before all the selected test cases in this class are run.
Note: It does not seem to be guaranteed that all tests in one class will be run before tests from other classes - I've gotten other tests running before the cleanup of the previous class ran.
<code>
[ClassInitialize]
public static void Initialize(TestContext context)
{
}
</code>

This initialize method is called once before each test case in this class is run.
<code>
[TestInitialize]
public void Initialize()
{
}
</code>

#Cleanup

Cleanup does not run if Initialize threw an exception.

This cleanup method is called once after all the selected test cases in this class are run.
<code>
[ClassCleanup]
public static void Cleanup()
{
}
</code>

This cleanup method is called once after each test case in this class is run.
<code>
[TestCleanup]
public void Cleanup()
{
}
</code>

#Exceptions

<code>
[TestMethod]
[ExpectedException(typeof(ArgumentException))]
public void TestMethod()
{
	//assign
	//act
	//exception expected instead of assert
}

[TestMethod]
[ExpectedException(typeof(ArgumentException), "Custom description of error.")]
public void TestMethod()
{
	//assign
	//act
	//exception expected instead of assert
}
</code>

#DataTestMethod

Run the same test with different inputs:
<code>
using Microsoft.VisualStudio.TestTools.UnitTesting; //from Microsoft.VisualStudio.TestPlatform.TestFramework.dll

[DataTestMethod]
[DataRow(-1)]
[DataRow(0)]
[DataRow(1)]
public void MyTest(int value)
{
	var result = Operation(value);

    Assert.IsFalse(result);
}
</code>

#Scripts

Tricky unit test setups I've had to figure out.

Testing an Asp.Net Core Model Binder
<code>
using System.Collections.Generic;
using System.Globalization;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.Extensions.Primitives;
using Xunit;

//Arrange
var context = new DefaultModelBindingContext()
{
	ModelName = "MyModel",
	ValueProvider = new CompositeValueProvider(new List<IValueProvider>()
	{
		new QueryStringValueProvider(
			new BindingSource("id", "displayName", isGreedy: false, isFromRequest: true),
			new QueryCollection(new Dictionary<string, StringValues>() {
				{ "Test", new StringValues("12") }
			}),
			CultureInfo.DefaultThreadCurrentCulture)
	})
};

//Act
await _modelBinder.BindModelAsync(context);

//Assert
Assert.True(context.Result.IsModelSet);
var filterCriteria = Assert.IsType<MyModel>(context.Result.Model);
Assert.NotNull(filterCriteria);
</code>

If you need an HttpResponseHeaders object for testing, you can get it by instantiating an HttpResponseMessage.
If you need an HttpContent from an object, see these children of HttpContent:
- ByteArrayContent, FormUrlEncodedContent, StringContent, MultipartContent, ReadOnlyMemoryContent, StreamContent, JsonContent
<code>
HttpContent example = JsonContent.Create(new MyObject());
</code>
