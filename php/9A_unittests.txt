## PHPUnit Unit Tests

# Setup

Install: sudo apt install phpunit

Verify Installtion: phpunit --version

Run a test file: phpunit myunittests.php

# Unit Test

Test functions must be named "test...".
Will only run the first test class found in the file.
An "exit()" being run during a test will exit phpunit.

<code>
	<?php
	
	include("../file_under_test.php");

	use PHPUnit\Framework\TestCase;
//	use MyProject\MyNamespace; //haven't got namespacing working yet

	class TestXYZ extends TestCase
	{
		public function testSomething() : void
		{
			//Arrange
			$password_raw = "redyellowblue";
			//Act
			$hashed_a = create_password_hash($password_raw);
			$hashed_b = create_password_hash($password_raw);
			//Assert
			self::assertNotSame($hashed_a, $hashed_b);
		}
	}

	?>
</code>

# Testing Global Functions

You cannot override, overload, monkey patch, or mock global functions.
Here is an example of refactoring code so that unit testing is still possible (assuming you are not using Classes, which can be mocked).

Original file:
<code>
	<?php
		if(php_sapi_name() == "cli") {
			http_response_code(404);
			include('404_not_found.php');
			die();
		}
		
		if($argv[0] == "create_admin") {
			//stuff
		}
		else if($argv[1] == "remove_user") {
			//stuff
		}
	?>
</code>
This is hard to unit test because we can't change the result of "if(php_sapi_name() == "cli")", it will always be false during testing.

Refactored file:
<code>
	<?php
		if(php_sapi_name() == "cli") {
			http_response_code(404);
			include('404_not_found.php');
			die();
		}
		
		handle_command($argv);
		
		function handle_command($arguments) {
			if($arguments[0] == "create_admin") {
				//stuff
			}
			else if($arguments[1] == "remove_user") {
				//stuff
			}
		}
	?>
</code>
Function "handle_command" can be fully unit tested. The glue putting it all together would need to be end-to-end tested.

# Testing Echo

<code>
//in the code under test
echo("abc");

//test case
public function testEchoMessage() : void
{
	$this->expectOutputString("abc");
	functionUnderTest();
}	
</code>

# Testing Exceptions

<code>
$this->expectException(InvalidArgumentException::class);
$this->expectExceptionMessage("message");
</code>

For more explicit assertions on an exception, use "try/catch" within the test method to get the exception.
