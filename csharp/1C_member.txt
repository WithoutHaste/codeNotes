##Members

#Field

a variable declared directly in a class or struct
see Instance Fields vs Static Fields

#Property

<code>
public int Name
{
	get; //get accessor
	set; //set accessor
}
</code>
special methods called accessors provide a flexible mechanism to read and write data

TODO: verify this
By default, the private field linked to "Name" is "_name".
You can reference these implicit private fields, like "public int Age { get => _age; set => _age = value; }"

As of C# 7, property accessors can be expression bodied:
<code>
private string name;
public string Name
{
	get => name;
	set => name = value.ToUpperCase();
}
</code>

(.Net 9)

Init Only Setters
For properties (and indexers) that are set only during initialization, and cannot be modified after that.
<code>
public class MyClass
{
	public int X { get; init; } //get accessor and init accessor
    public int Y { get; init; }
}

var myInstance = new MyClass() { X = 1, Y = 2 }; //X and Y are readonly after this
</code>

#Method

functions specific to a class

To get reflection information:
<code>
using System.Reflection;

public class MyType 
{ 
	public void MyMethod() { }
}

//within method...
Type type = typeof(MyType);
MethodInfo methodInfo = type.GetMethods()[0];
</code>

As of C# 6.0 or 7.0, you can format a method as an expression body:
<code>
//with expression body
public class Foo
{
	public string Name { get; }
	public string Age { get; }
	
	public Foo(string name, int age) => (Name, Age) = (name, age);
}
//with block body
public class Foo
{
	public string Name { get; }
	public string Age { get; }
	
	public Foo(string name, int age)
	{
		Name = name;
		Age = age;
	}
}
</code>

#Local Function

As of C# 7, you can declare functions inside other methods.
The inner Local function is only avaliable to the outer method.

Example of separating validation code from implementation code:
<code>
public static IEnumerable<char> AlphabetSubset(char start, char end)
{
	if (start < 'a' || start > 'z')
		throw new ArgumentOutOfRangeException(paramName: nameof(start), message: "start must be a letter");
	if (end < 'a' || end > 'z')
		throw new ArgumentOutOfRangeException(paramName: nameof(end), message: "end must be a letter");	
	if (end <= start)
		throw new ArgumentException($"{nameof(end)} must be greater than {nameof(start)}");
	
	return alphabetSubsetImplementation();
	
	IEnumerable<char> alphabetSubsetImplementation()
	{
		for (var c = start; c < end; c++)
			yield return c;
	}
}
</code>

Example of ensuring that exceptions from validation are thrown before asynchronous work begins:
<code>
public Task<string> PerformLongRunningWork(string address, int index, string name)
{
	if (string.IsNullOrWhiteSpace(address))
		throw new ArgumentException(message: "An address is required", paramName: nameof(address));
	if (index < 0)
		throw new ArgumentOutOfRangeException(paramName: nameof(index), message: "The index must be non-negative");
	if (string.IsNullOrWhiteSpace(name))
		throw new ArgumentException(message: "You must supply a name", paramName: nameof(name));
	
	return longRunningWorkImplementation();
	
	async Task<string> longRunningWorkImplementation()
	{
		var interimResult = await FirstWork(address);
		var secondResult = await SecondStep(index, name);
		return $"The results are {interimResult} and {secondResult}. Enjoy.";
	}
}
</code>

See Lambda Expressions for similar functionality.
	
#Event

publisher classes raise events to alert subscriber classes
	
#Operator

such as + ++ - * / ?: new

#Indexer

aka Smart Array

allows a class to be indexed like an array
resembles a Property
<code>
public int this[int i]
{
	get;
	set;
}
</code>

Indexes can accept a variety of parameters. You can overload indexers by using different parameter lists in the same object.

<code>
public class MyClass<T>
{
	private List<T> list = new List<T>();
	private Dicationary<string, T> dictionary = new Dicationary<string, T>();
	
	public T this[int key]
	{
		get 
		{
			return list[key];
		}
	}
	
	public T this[int row, int column]
	{
		get 
		{
			return list[row][column];
		}
	}
	
	public T this[string key]
	{
		get
		{
			return dictionary[key];
		}
	}
	
	public T this[params string[] keys]
	{
		get
		{
			return //something that uses multiple string keys
		}
	}
}
//calling the indexors
MyClass<Object> myClass = new MyClass<Object>();
Object a = myClass[5];
Object b = myClass["name"];
Object c = myClass["a", "b", "c"];
</code>
	
#Constructor

special functions called on class instantiation
Constructors do not have a return type
<code>
Customer() { }
</code>

Constructor chaining to a base-type constructor:
<code>
class A
{
	public A(int x) 
	{
		//handle x
	}
}
class B : A
{
	public B(int x, int y) : base(x)
	{
		//handle y
	}
}
</code>

Constructor chaining to another constructor in this type:
<code>
class A
{
	public A(int x) : this(x, defaultY)
	{
	}
	public A(int x, int y)
	{
		//handle x and y
	}
}
</code>

As of C# 7, constructors can be expression bodied:
<code>
class A
{
	public int X { get; set; }
	public int Y { get; set; }
	
	public A(int x, int y) => (X, Y) = (x, y);
}
</code>

#Primary Constructor

(.Net 12)

Any parameters in the primary constructor are automatically in-scope for the whole type.
A primary constructor indicates that these parameters are necessary for any instance of the type.

(class, record class) The implicit parameterless constructor isn't emitted when a primary constructor is present.
(struct, record struct) The implicit parameterless constructor is always emitted, and always initializes all fields, including primary constructor parameters, to the 0-bit pattern.

If there is a primary constructor, its parameter list is defined in the class declaration line.
Primary constructors are synthesized from this syntax.
<code>
public class NamedItem(string name)
{
	public string Name => name;
}
</code>

For a record, this declaration is sufficient to define the entire record and primary constructor:
<code>
public record UserDto(int Id, string Name, DateTime CreatedDateTime);
</code>

Any explicitly written constructor must use the "this(...)" initializer syntax to invoke the primary constructor. Even an explicit parameterless constructor must invoke the primary constructor.

Calling a parent class's primary constructor
<code>
public class Widget(string name, int count) : NamedItem(name)
{
	public Widget() : this("N/A", 1) {}

	public int Count => count;
}
</code>

Add attributes to the primary constructor
<code>
[method: MyAttribute]
public class MyClass(string name)
{
}
</code>

Add attribute to a positional parameter.
Add xml comments to a positional parameter.
<code>
/// <summary>
/// Person record type
/// </summary>
/// <param name="FirstName">First Name</param>
/// <param name="LastName">Last Name</param>
public record Person(
	[property: JsonPropertyName("firstName")] string FirstName, 
    [property: JsonPropertyName("lastName")] string LastName
	);
</code>

If you don't want to use the auto-generated Property based on the Positional Parameter,
then you can define your own Property that matches the naming convention, 
and is initialized to the Positional Parameter value.
<code>
public record Person(string FirstName, string LastName, string Id)
{
	internal string Id { get; init; } = Id;
}
</code>

#Static Constructor

Special function called only once per type, either automatically before the first instance is created, or automatically before the first static method is called. The static constructor can initialize static fields, or run other one-time operations.
<code>
class A
{
	static A(int x)
	{
	}
	public A(int y)
	{
	}
}
</code>

#Destructor / Finalizer

a special function to destruct a class
only one allowed per class
Destructors cannot be called, they are invoked automatically
the Destructor implicitly calls Finalize on the object's base class
Destructors do not have a return type
<code>
~Customer() { }
</code>

As of C# 7, destructors can be expression bodied:
<code>
~Customer() => Console.WriteLine("Finalized");
</code>

#Nested Type

a class or struct declared inside another class
the inner class can only be used by the outer class

#Deconstructor

C# 7 and above.

This pattern provides Type-to-Tuple conversion.

You can define multiple Deconstruct methods for a Type.
The deconstructor used will depend on the tuple it is being assigned to.

<code>
public class Person
{
	public int Age { get; set; }
	public string Name { get; set; }
	public string Title { get; set; }
	
	//constructor
	public Person(int age, string name, string title)
	{
		Age = age;
		Name = name;
		Title = title;
	}
	
	//deconstructor
	public void Deconstruct(out int age, out string name)
	{
		age = Age;
		name = Name;
	}
	
	//deconstructor
	public void Deconstruct(out int age, out string name, out string title)
	{
		age = Age;
		name = Name;
		title = Title;
	}
}

var person = new Person(23, "Smith", "Engineer");
var (age1, name1) = person;
var (age2, name2, title2) = person;
</code>

Deconstrutors can be added as Extension Methods.

Deconstructor as expression:
<code>
	public void Deconstruct(out int age, out string name, out string title) =>
		(age, name, title) = (Age, Name, Title);
</code>
