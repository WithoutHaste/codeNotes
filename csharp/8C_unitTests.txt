##Unit Testing

#Test Privates

You can unit test private methods using the PrivateObject.
<code>
using Microsoft.VisualStudio.TestTools.UnitTesting;

public class Apple
{
	public Apple()
	{
	}
	
	private int Count()
	{
		return 5;
	}
}

[TestClass]
public class TestClass
{
	[TestMethod]
	public void TestMethod()
	{
		Apple apple = new Apple();
		PrivateObject privateApple = new PrivateObject(apple);
		
		int result = privateApple.Invoke("Count");
		
		Assert.AreEqual(5, result);
	}
}
</code>

#Test Internals

You can unit test internal classes by marking the original assembly as friendly to the test assembly.

Add this to either the Properties/AssemblyInfo.cs file or to a code file in the assembly.
<code>
using System.Runtime.CompilerServices;
[assembly:InternalsVisibleTo("NameOfFriendAssembly")]
</code>

Marking multiple assemblies as friendly:
<code>
using System.Runtime.CompilerServices;
[assembly:InternalsVisibleTo("NameOfFriendAssemblyA")]
[assembly:InternalsVisibleTo("NameOfFriendAssemblyB")]
//or
[assembly:InternalsVisibleTo("NameOfFriendAssemblyA"), InternalsVisibleTo("NameOfFriendAssemblyB")]
</code>

#Scripts

These are tricky unit test setups I've had to figure out.

Testing an Asp.Net Core Model Binder
<code>
using System.Collections.Generic;
using System.Globalization;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.Extensions.Primitives;
using Xunit;

//Arrange
var context = new DefaultModelBindingContext()
{
	ModelName = "MyModel",
	ValueProvider = new CompositeValueProvider(new List<IValueProvider>()
	{
		new QueryStringValueProvider(
			new BindingSource("id", "displayName", isGreedy: false, isFromRequest: true),
			new QueryCollection(new Dictionary<string, StringValues>() {
				{ "Test", new StringValues("12") }
			}),
			CultureInfo.DefaultThreadCurrentCulture)
	})
};

//Act
await _modelBinder.BindModelAsync(context);

//Assert
Assert.True(context.Result.IsModelSet);
var filterCriteria = Assert.IsType<MyModel>(context.Result.Model);
Assert.NotNull(filterCriteria);
</code>

If you need an HttpResponseHeaders object for testing, you can get it by instantiating an HttpResponseMessage.
If you need an HttpContent from an object, see these children of HttpContent:
- ByteArrayContent, FormUrlEncodedContent, StringContent, MultipartContent, ReadOnlyMemoryContent, StreamContent, JsonContent
<code>
HttpContent example = JsonContent.Create(new MyObject());
</code>

Given a real Controller, how to mock its HttpContext?
<code>
public void SetupControllerContext(Controller controller, string bearerToken)
{
	var headerCollection = new Mock<IHeaderDictionary>();
	headerCollection.Setup(m => m[ProblemDetailsController.HEADER_AUTHORIZATION]).Returns(bearerToken);
	headerCollection.Setup(m => m.ContainsKey(It.IsAny<string>())).Returns(true);
	var request = new Mock<HttpRequest>();
	request.SetupGet(x => x.Headers).Returns(headerCollection.Object);
	var httpContext = new Mock<HttpContext>();
	httpContext.SetupGet(x => x.Request).Returns(request.Object);
	var context = new ActionContext(httpContext.Object, new RouteData(), new ControllerActionDescriptor());
	controller.ControllerContext = new ControllerContext(context);
} 
</code>