##Operators

#Logical

&& || !

Short-Circuit Evaluation: Logical expressions are short-circuited, meaning evaluation will stop as soon as it has a definitive answer.

For example, this expression will not throw a null reference exception because evaluation ends before that error would be triggered:
<code>
Object x = null;
bool y = false;
if(y && x.Property) {
  //do something
}
</code>

Note that expressions passed to libraries do not always short-circuit. I've just found the IMongoQueryable from the MongoDb library does not short-circuit, likely because the entire expression is being converted into a different query language.

#Prefix and Postfix Incrementors

<code>
int x = 5;
x++; //postfix x = x + 1
++x; //prefix x = x + 1
x--; //postfix x = x - 1
--x; //prefix x = x - 1
</code>

A prefix expression will return the new value of x.
A postfix expression will return the previous value of x.

<code>
int[] numbers = new int[] { 0,1,2,3,4,5 };
int index = 2;
int a = numbers[index++]; //a = numbers[2]
index = 2;
int b = numbers[++index]; //b = numbers[3]
</code>

In a for loop like (int x=0; x<length; x++) it does not make a difference.

#Conditional Operator

Aka Ternary Operator

The Conditional Operator is used to write a Conditional Expression.

A single-line if/else statement:
<code>
bool result = (1 < 2) ? true : false;
</code>

(.Net 7.2)

Can produce a ref result.
<code>
ref var r = ref (array != null ? ref array[0] : ref otherArray[0]);
</code>

#Null Coalesce (??)

aka null-coalescing

<code>
x = y ?? 0;
//if y is null, 0 is set instead
</code>

<code>
x = y ?? z ?? 0;
//chain it
</code>

#Null-Coalescing Assignment (??=)

(in C# 8)

Only updates the variable value if it is currently null
<code>
widget.field ??= "smith";
// is the same as
if(widget.field == nul;)
{
	widget.field = "smith";
}
</code>

#Null Conditional (?)

As of C# 6.0 (.Net Framework 4.6)

aka Null Propagator

Offers succinct null checking

<code>
return student?.GetGrades();
//if student is null, null is returned
//otherwise, GetGrades() is run
</code>

<code>
return students?[index];
//if students is null, null is returned
//otherwise, students[index] is returned
</code>

<code>
MyEvent?.Invoke(this, new EventArgs());
//if event has no listeners, do nothing
//otherwise, invoke the event
</code>

#Null Forgiving (!)

As of C# 8.0

Declares to the compiler that a reference type value is definitely not null, so that you aren't given warnings about it.

In this example, "p" is a possibly-null value.  The call to "Name" specifies that "p" is for-sure not null by that time.
<code>
Person? p = Find("John");
if (IsValid(p))
{
	Console.WriteLine($"Found {p!.Name}");

	Console.WriteLine($"Found {p.Value.Name}"); //instead of this
}
</code>

Another option here is
<code>
Person? p = Find("John");
if (IsValid(p))
{
	Console.WriteLine($"Found {p.Name}");
}

public static bool IsValid([NotNullWhen(true)] Person? person) => person is not null && person.Name is not null;
</code>

#Is

Return true if object is of the specified type:
<code>
if(myObject is MyType)
{
}
</code>

(C# 7) Return true if object is of the specified type, and cast is to the variable:
<code>
if(myObject is MyType myVariable)
{
	//use myVariable
}
</code>

#Yield

"Yield" can be used instead of IEnumerable.

Auto-return each element in the collection one at a time:
<code>
yield return myCollection;
yield break; //end iteration
</code>

Method as iterator:
<code>
using System.Collections.Generic;

foreach(int i in Power(2, 8))
{
	Console.WriteLine(i);
}

public static IEnumerable<int> Power(int a, int b)
{
	int result = 1;
	for(int i = 0; i < b; i++)
	{
		result = result * a;
		yield return result;
	}
}
</code>

Property as iterator:
<code>
using System.Collections.Generic;

MyClass myClass = new MyClass();
foreach(int x in myClass.Numbers)
{
	Console.WriteLine(x);
}

public class MyClass
{
	public IEnumerable<int> Numbers
	{
		get
		{
			yield return 5;
			yield return 78;
			yield return 2;
			yield return 12;
		}
	}
}
</code>

#Default

Default Operator "default"
Default Value Expression "default(type)"

The default value of reference-types is null:
<code>
Object x = default(Object); //x = null
</code>

The default value of value-types is something like 0:
<code>
int x = default(0); //x = 0
</code>

You can define your own default value on classes and structs.

As of C# 7.1, you can use just "default" instead of "default(type)" anywhere the compiler can infer the type. This is called the Default Literal Operator.
<code>
public Object MyMethod(List<int> list = default)
{
	int x = default; //x = 0
	return default; //returns null
}
</code>

#Operator Overloading

You can overload any operator.

<code>
public static MyClass operator +(MyClass a, MyClass b)
{
	return new MyClass(a.X + b.X);
}
</code>

You cannot overload logical and (&&) or logical or (||), but you can overload true, false, bitwise and (&), and bitwise or (|).
