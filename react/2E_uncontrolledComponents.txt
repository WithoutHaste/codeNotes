##Uncontrolled Components

The form data is handled by the DOM as usual.

Example:
<code>
class NameForm extends React.Component 
{
	constructor(props) 
	{
		super(props);
		this.handleSubmit = this.handleSubmit.bind(this);
		this.input = React.createRef();
	}

	handleSubmit(event) 
	{
		alert('A name was submitted: ' + this.input.current.value);
		event.preventDefault();
	}

	render() 
	{
		return (
			<form onSubmit={this.handleSubmit}>
				<label>
					Name:
					<input type="text" defaultValue="Bob" ref={this.input} />
				</label>
				<input type="submit" value="Submit" />
			</form>
		);
	}
}
</code>

#File

File inputs must be uncontrolled components because the value can only be set by the user, not a program.

Tag "<input type='file'>".

Example:
<code>
class FileInput extends React.Component 
{
	constructor(props) 
	{
		super(props);
		this.handleSubmit = this.handleSubmit.bind(this);
		this.fileInput = React.createRef();
	}
	
	handleSubmit(event) 
	{
		event.preventDefault();
		alert(
			`Selected file - ${this.fileInput.current.files[0].name}`
		);
	}

	render() {
		return (
			<form onSubmit={this.handleSubmit}>
				<label>
					Upload file:
					<input type="file" ref={this.fileInput} />
				</label>
				<br />
				<button type="submit">Submit</button>
			</form>
		);
	}
}

ReactDOM.render(
	<FileInput />,
	document.getElementById('root')
);
</code>

