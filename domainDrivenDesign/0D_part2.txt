##Part 2

#Preface: The Building Blocks of Model Driven Design

"Certain kinds of decisions keep the model and implementation aligned with each other, each reinforcing the other's effectiveness. This alignment requires attention to the details of individual elements."

"The design style in this book largely follows the principle of Responsibilty Driven Design...and Design By Contract."

"Elaborate models can cut through complexity only if care is taken with the fundementals, rsulting in detailed elements that the team can confidently combine."

#Ch 4 Isolating the Domain

"The part of the software the specifically solves problems from the domain usually constitutes only a small portion of the entire software system...We need to decouple the domain objects from other functions of the system, so we can avoid confusing the domain concepts with other concepts related only to software technology or losing sight of the domain altogether in the mass of the system."

See Layered Architecture / Onion Architecture / Clean Architecuture.
Briefly, isolate the domain logic and don't make it dependent on any other part of the system.

Discussion of when it is appropriate to not use Layered Architecture: fast, simple projects with non-expert developers. See Smart UI Pattern.

#Ch 5 A Model Expressed in Software

"Associations between objects are simple to conceive and to draw, but implementing them is a potential quagmire...Associations illustrate how crucial detailed implementation decisions are to the viability of a Model Driven Design."

Patterns of model elements:
- Value Object
- Entity
- Service

An Entity has a identity that has continuity even as the state of the object changes, even if all its data changes. An Entity's identity may stretch across multiple systems and representations.

A Value Object merely describes an attribute, a value. They could all be immutable without affecting the system.

Services express actions or operations. Services perform operations upon request. These are the operations that don't make sense inside your Entities or Value Objects. These operations need to be done, but they don't correspond with State.

"A sense of the basic principles will help developers stay on course through the inevitable compromises."

Design Principle: "For every traversable association in the model, there is a mechanism in the software with the same properties."

"It is important to restrain relationships as much as possible...In real life, there are lots of many-to-many associations, and a great number are naturally bidirectional. The same tends to be true of early forms of a model as we brainstorm and explore the domain. But these general associations complicate implementation and maintentance. Furthermore, they communicate very little about the nature of the relationship...A bidirectional association means that both objects can be understood only together."

Options to replace a many-to-many relationship:
1) Impose a 1-to-many relationship on it
2) Reduce multiplicity by adding a condition/filter/qualifier to the relationship
3) Remove it entirely if it is non-essential

"This refinement actually reflects insight into the domain, as well as making a more practical design...It captures the understanding that one direction of the association is much more meaningful and important than the other."
Ex: Country <-> President is bidirectional, but we rarely ask "Which country was X president of?" and we rarly say "Y was president of both A and B countries." So we can simplify this relationship to Country -> President.

"An object should be distilled until nothing remains that does not relate to its meaning or support its role in interactions." (from ch 6)

Entity vs Value Object example:
At a bank, two transactions on the same day, for the same account, for the same amount are Entities because they are distinct from each other despite appearing similar.
The amount of those transactions is a Value Object, because there is no usefullness in distinguishing them from each other or tracking their indentities across time.

Design Principle: Provide all Entities with a way to compare their identity regardless of current state or history. Most commonly, this will be a unique key.

"Identity is not intrinsic to a thing in the world; it is a meaning superimposed because it is useful."

The common theme for these decisions is "what is useful to our purpose?"

"[When modeling Entities,] strip the Entity object's definition down to the most intrinsic characteristics, particularly those that identify it or are commonly used to find or match it. Add only behavior that is essential to the concept and attributes that are required by that behavior. Beyond that, look to remove behavior and attributes into other objects associated with the core Entity...Entities tend to fulfill their responsibilities by coordinating the operations of objects they own."

"[Value Objects] are the objects that describe things...An object that represents a descriptive aspect of the domain with no conceptual identity is called a Value Object...We care about what they are, but not who/which they are."

Example of when an Address is a Value Object: The domain is a mail-order company. It needs your address for your parcel. But if your roommate also places an order, it is not important to realize that the two addresses are the same.

Example of when an Address is an Entity: The domain is an electrical company that runs lines to houses/businesses. They do need to realize that both roommates at the same addresses put in an order. (In this case, maybe the Entity is a "Dwelling" which has a Value Object "Address". There are many ways to organize a domain model.)

Value Objects can be made up of other objects. They do not have to be a primitives like a String or Int.
Value Objects can include references to Entities. Ex: a driving route (Value Object) that links two locations (Entities).
Value Objects are frequently transient (never saved in long-term memory).
Value Objects are frequently attributes of Entities.

"The attributes that make up a Value Object should form a conceptual whole. For example, street, city, and postal code shouldn't be separate attributes of a Person object. They are part of a single, whole Address, which makes a simpler Person, and more coherent Value Object."

Why Value Objects should be Immutable:
- Memory can be conserved by sharing Value Objects without risking data corruption.
  - Ex: PersonA and PersonB share a Name. PersonA edits their Name by instantiating a new Name object, so that PersonB's Name is not affected.
  - A lot of memory can be used up by repeated Value Objects. For instance, imagine every Electrical Outlet in a Floor Plan was a unique object instead of one shared object.
- Value Objects can be passed as arguments without worrying about unintended side effects.
  - Ex: PersonA passes their Name into a method. They know the method will not edit the Name because it cannot.

Not all the constraints we define in the model can be enforced with the programming language we are using. In these cases, you must rely on conventions, good naming standards, and good communication.

The associations between Value Objects should be kept simple for the same reasons as for Entities.
With the addendum that there is never a reason to have a bi-directional association between Value Objects. If you're sure you need one, they are probably actually Entities.

"Some concepts from the domain aren't natural to model as objects."
Services are for domain operations that have no proper Entity to belong to.
Services frequently orchestrate interactions between many Entities at once.
Services must be stateless - they can change the state of the system, but must not keep any internal state.
Services are named for verbs instead of for nouns.
- Operation names should still be a part of the ubiquitous language.
- Parameters and results should be domain objects.

"Now, the more common mistake is to give up too easily on fitting the behavior into an appropriate object, gradually slipping towards procedural programming. But when we force an operation into an object that doesn't fit the object's definition, the object loses its conceptual clarity and becomes hard to understand or refactor...Complex operations can easily swamp a simple object, obscuring its role."

"Services should be used judiciously and not allowed to strip the Entities and Value Objects of all their behavior."

Where is the division between Application Services and Domain Services?
Ex: Giving banking software
- ExportReportToCSV is an Application Service because it involves concepts (like file format) that do not exist in the banking domain and does not involve any business rules.
- TransferMoneyBetweenAccounts is a Domain Service because it heavily involves banking domain concepts and business rules.

Domain Services can become a useful medium-grained layer between the application and the fine-grained Entity objects of the domain.
They can form a set of use cases, and can keep business rules from creeping into the application layer.

Modules (aka Packages aka Assemblies) are both a technical division of code, and a conceptual division of the design.
If the domain is divided into multiple Modules, take care that the resulting Modules have low coupling between them and high cohesion within them.
Modules that are divided well will reduce the mental strain of working in the Modules, because they will have low coupling between them, so you can focus on one small part of the code at a time.

"Modules and the smaller elements should coevolve, but typically they do not. Modules are chosed to organize an early form of the objects. After that, the objects tend to change in ways that keep them in the bounds of the existing Module definition...Even developers who refactor a lot tend to content themselves with Modules conceived early in the project...Refactoring Modules is more work and more disruptive than refactoring classes, and probably can't be as frequent. But just as Model Objects tend to start out naive and concrete and then gradually transform to reveal deeper insight, Modules can become subtle and abstract."

"Like everything else in a domain-driven design, Modules are a communications mechanism. The meaning of the objects being partitioned needs to drive the choice of the Modules. When you place some classes together in a Module, you are telling the next developer who looks at your design to think about them together."

If you must make trade-offs between conceptual cohesion and technical cohesion, choose greater conceptual clarity. The technical difficulties can be handled when the story the code tells is understandable.

Some frameworks or infrastructures impose module divisions on a project. Do not allow this to complicate your domain. It is more important to have an easily comprehended domain than to follow a particular framework's rules.

Object-oriented programming is a good choice because:
- Objects and relationships correlate well with the domain model.
- It has been proven over time to be easily comprehended by both technical and non-technical people.
- It is widely understood, so you can find experienced programmers.
- There are many support and integration tools already in existance.

A good bit of talk about the usefullness of sticking with Model Driven Design, despite technical obstacles.

"Although a Model Driven Design does not have to be object oriented, it does depend on having an expressive implementation of the model constructs...If the available tool does not facilitate that expressiveness, reconsider the choice of tools...An unexpressive implementation negates the advantage of the extra paradigm."

Rules of thumb for mixing non-object elements into an object-oriented system:
- Don't fight the implementation paradigm. "There's always another way to think about a domain. Find model concepts that fit the paradigm."
- Lean on the ubiquitous language. "Even when there is no rigorous connection between tools, very consistent use of language can keep parts of the design from diverging."
- Don't get hung up on UML. "Sometimes the fixation on a tool, such as UML diagramming, leads people to distort the model to make it fit what can easily be drawn."
- Be skeptical. "Is the tool really pulling its weight? Just because you have some rules, that doesn't necessarily mean you need the overhead of a rules engine."

"Before taking on the burden of mixed paradigms, the options within the dominant paradigm should be exhausted...Even though some domain concepts don't present themselves as obvious objects, they often can be modeled within the paradigm."

#Ch 6 The Life Cycle of a Domain Object

Challenges of managing long-lived objects:
- Maintaining integrity throughout the life-cycle.
- Preventing the model from getting swamped by the complexity of managing the life-cycle.

Patterns:
- Aggregates
- Factories
- Repositories

(I'm used to "Aggregate" meaning either a collection, like a list or dictionary, or an operation against a collection, like average or minimum.)
(Would the name "Composite" work better?)

An Aggregate is a cluster of associated objects that are treated as a single unit in regards to edits.
Each Aggregate has a root and a boundary.
This boundary gives hard rules about how much of the data could be affected by editing the Aggregate. This is enormously helpful in maintaining data integrity in a complex project.

The Aggregate root is a single, specific Entity.
The root is the only object in the Aggregate that outside objects are allowed to reference.
Non-root Entities within the Aggregate only require local ids (unique within the Aggregate).

Ex: the domain is a car repair shop.
A car is an Entity and the root of its Aggregate.
The car knows which tires it has, and their rotation history.
The system will never make a global search for a tire. It will only search of a car and ask it about its tires.
If a tire is removed from a car, the system will not care that that particular tire ends up in the junk yard or on another car.
Thus, the tires are part of the car Aggregate.
However, engine blocks have their own serial numbers and are commonly moved from car to car. Therefore, the engine block might be the root of its own Aggregate.

An Invariant is a consistency rule that must be maintained whenever data changes.
Invariants will involve relationships among members of an Aggregate. There rules are expected to stay up-to-date with each transaction.
Invariants that span Aggregates are expected to be out-of-sync sometimes.

Aggregate rules:
- The root Entity has a globally unique id.
- The root Entity is responsible for maintaining Invariants for its Aggregate.
- Non-root Entities in the Aggregate have locally unique ids.
- Objects outside the Aggregate may only refernce the root Entity.
- The root Entity can hand object references out, but they are expected to be short-term, transient references.
- Only root Entities can be obtained directly with database queries.
- If the root Entity is deleted, then everything in the Aggregate must be deleted.

(MongoDb and document-oriented databases in general are already Aggregate-oriented. Aggregate == Document.)

"Much of the power of objects rests in the intricate configuration of their internals and their associations...Problems arise from overloading a complex object with responsibility for its own creation."

Factories are responsible for creating other objects.
Factories encapsulate the creation of complex Entities or Aggregates.
Factories provide a way to divide the creation of an object from the operations that are the purpose of the object.
Each creation method is atomic and enforces all Invariants of the Entity/Aggregate it returns.
Creation methods do not require the client to know what concrete classes will be returned.

"Because cars are never assembled and driven at the same time, there is no value in combining both of these functions into the same mechanism. Likewise, assembling a complex compound object is a job that is best separated from whatever job that object will have to do when it is finished."

"Complex object creation is the responsibility of the domain layer, yet that task does not belong to the objects that express the model...Object creation and assembly usually have no meaning in the domain; they are a necessity of the implementation...We are adding elements [Factories] to the design that do not correspond to anything in the model, but they are nonetheless part of the domain layer's responsibility."

Some Factory design patterns are Factory Method, Abstract Factory, and Builder.
Factory methods frequently exist in the root Entity of the Aggregate affected, or in a highly-related Entity that already contains much of the information needed for the Factory.
A dedicated Factory object or Service should be created if there is no natural Entity to add the Factory Method to.

Use a constructor instead of a Factory when:
- The class is not part of a hierarchy and is not polymorphically used by implementing an interface.
- The client does care which concrete class is returned (such as when using the Strategy Pattern, or when performance is sensitive to implementation selection).
- The client already has all the information needed to create the object.
- The constructor is simple.

"Avoid calling constructors within constructors of other classes. Constructors should be dead simple...The threshold for choosing to use a little Factory Method isn't high."

Does the Invariant logic belong in the Factory or the Entity? It should stay in the Entity.
The Factory can rely on the Entity to validate that its Invariant rules have been satisfied.
- There are exceptions for Aggregate-level Invariant rules. (Such as rules that only apply during creation, and are enforced by the immutabilty of the data after that.)
- But never move Entity Invariant logic into a Factory Method that lives in another object.

Factories can also be used to reassemble a flattened object that was saved to persistent storage.

How to acquire the reference to an object?
- Create the object
- Traverse a series of references to the object
- Query a database to find the object

Reconstitution: restoring an object from a database to memory (distinct from Instantiation when the Entity was first created)

Problems with writing to much save/load logic:
- Your mind is more concerned with the technology than with your domain model.
- Your tempted to bypass object operations and edit the database directly.
- Your tempted to query exactly the data you need instead of traversing to it from an Aggregate root.
- Domain logic becomes embedded in database queries.

The Repository pattern encapsulates all data storage and retrieval concerns so that you can continue concentrating on your domain.
A Repository is not limited to CRUD operations. It encompasses specially designed queries for specific business needs.

"A Repository represents all objects of a certain type as a conceptual set...It acts like a collection, except with more elaborate querying capability. Objects of the appropriate type are added and removed, and the machinery behind the Repository inserts them or deletes them from the database."

"A Repository lifts a huge burden from the client, which can now talk to a simple, intention-revealing interface, and ask for what it needs in terms of the model. To support all this requires a lot of complex techinical infrastructure, but the interface is simple and conceptually connected to the domain model."

Principle: For each type of object that needs global access, create an object that can provide the illusion of an in-memory collection of all objects of that type. Provide Repositories only for Aggregate roots that actually need direct access.

A Repository may manage one abstract or parent type, rather than using one Repository for each concrete type.

Developers will still need to understand how the Repository works, so they can take performance issues into account.

The client application will still be in charge of deciding when to commit transactions, as the client understands the full context of the operation.

Keep your Factories and Repositories separate. The Reposistory can use the Factory, but don't merge them together. The Factory is in charge of an object's beginning. The Repository is in charge of an object's middle-of-life.

"The most common non-object component of primarily object-oriented software systems is the relational database. This reality presents the usual problems of a mixture of paradigms. But the database is more intimately related to the object model than are most other components."
- If the database is just for storing the objects, it is worth limiting the object model to what the database can store so that the mapping between them is simple and stays in sync as the object model is refactored.
- If the database is just for storing objects, do not let any other system edit the database. This is likely to break the object invariant rules.
- The database may be partially denormalized to support the object model or performance goals.
- If the data comes from a legacy system, then the database model will be different and separate from the object model.
- The ubiquitous language can help tie the object and the relational components together to a single model.

"The tradition of refactoring that has increasingly taken hold in the object world has not really affected relational database design much. What's more, serious data migration issues discourage frequent changes. This may create a drag on the refactoring of the object model, but if the object model and the database model start to diverge, transparency can be lost quickly."

"Cutting [the database model and the object model] loose from each other is a seductive path. It is often taken unintentionally, when the team fails to keep the database current with the model. If the separation is chosen consciously, it can result in a clean database schema - not an awkward one full of compromises conforming to last year's object model."

#Ch 7 Using the Language: An Extended Example

Example of building and modifying a domain model.
Example of using the ubiquitous language to talk about user stories.
Example of moving behavior out of one object into its own object to clarify important domain concepts.
Example of turning a many-to-many relationship into a many-to-one by being more specific.
Example of differentiating Entities from Value Objects.
Example of determining the direction of relationships.
Example of when to use bidirectional relationship.
Example of when to use a circular relationship.
Example of drawing in the Aggregate Boundaries.
Example of deciding which Aggregates need Repositories.
Example of how discussing User Stories in terms of the Domain Model informs all of these decisions.
Example of using Constructors and Factories.
Example of refactoring the Design Model as implementation reveals annoyances and/or implementation cannot satisfy User Stories with the current Domain Model.
Example of replacing a persistent object with a derived (transient) object.

Some objects that exist in the Domain Model and the Object Model may not exist in the Database Model. They might be the result of a query.
This example shows how to remove the difficulties of implementing a circular reference by making a Domain Object transient instead of persisted.

A sign of a good design: User Stories that make changes only within one Aggregate Boundary.

Example of common errors in partitioning Modules:
- Partitioning by Entity/Value Object/Service
- Partitioning by Persistent/Transient
- Partitioning by anything that does not take into account the meaning of the objects

Example of Module names becoming part of the Ubiquitous Language.
Example of adjusting to new requirements.
Example of integrating with another system.
Example of naming a Service to be informative.
Example of designing an Anti-Corruption Layer.
