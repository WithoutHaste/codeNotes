##Part 1

#Preface: Putting the Domain Model to Work

A model represents a portion of reality or an idea of interest.

The domain of a software project is the subject area to which the user apples the software.

Models are tools for grappling with breadth and complexity of knowledge of the domain required to implement the software project.

"An appropriate model makes sense of information and focuses it on a problem."

"A domain model is not a particular diagram; it is the idea that the diagram is intended to convey."

"[A domain model] is not just the knowledge in the domain expert's head; it is a rigorously organized and selective abstraction of that knowledge."

"Domain modeling...is loosely representing reality to a particular purpose...a domain modeler chooses a particular model for its utility."

Model Utility:
(1) Model and implementation shape each other. This keeps the model relevant and ensures the analysis that went into it applies to the final product. You should be able to interpret the code based on your understanding of the model.
(2) Ubiquitous Language. The language of the model is used by technical and non-technical people alike. This facilitates communication.
(3) The model is distilled knowledge. It distinguishes elements of most interest. It is a shared understanding of the domain.

"The binding of model and implementation makes experience with early versions of the software applicable as feedback into the modeling process."

"The heart of software is its ability to solve domain-related problems for its user. All other features...support this basic purpose."

#Chapter 1 Crunching Knowledge

Extended example of building a brand new domain model in brainstorming sessions with domain experts.
- Use the language of the domain experts
- Focus on the important parts of the model, based on the current task
- Iterate the design by discussing how processes will use the model

Ingredients of Effective Modeling:
(1) Binding the model and the implementation.
(2) Cultivating a language based on the model.
(3) Developing a knowledge-rich model. Include behavior, rules, etc. It's more than a data schema.
(4) Distilling the model. Don't include what you don't need now.
(5) Brainstorming and experimenting. Rapid iteration with pencil/paper models.

"As the team went through scenarios, the spoken expressions themselves provided a quick viability test of a proposed model, as the ear could quickly detect either the clarity and ease or the awkwardness of expression."

Knowledge Crunching is the sifting, combining, recombining, and distillation of domain knowledge into a concise and useful model that can be applied to your particular problems.

"Knowlege crunching is not a solitary activity. A team of developers and domain experts collaborate..."

You need rapid and constant feedback between developers and domain experts.
Developers need to take an active interest in learning about the domain they are programming for.

It's not just about making Noun Objects (Document, Customer, Order, etc).
Business is all about abstract concepts like Responsibility, Policy, and step by step Processes.
Example of making domain knowledge clear: Business rule allows shipping to be overbooked to %110.
<code lang="csharp">
//bad, hides domain knowledge in a guard clause
public int makeBooking(Cargo cargo, Voyage voyage)
{
	double maxBooking = voyage.capacity() * 1.1;
	if((voyage.bookedCargoSize() + cargo.size()) > maxBooking)
		return -1;
	voyage.addCargo(cargo);
	return 1;
}

//good, raises domain knowledge up, makes it visible
public class OverbookingPolicy : Policy
{
	public bool isAllowed(Cargo cargo, Voyage voyage)
	{
		return (cargo.size() + voyage.bookedCargoSize()) <= (voyage.capacity() * 1.1);
	}
}

public int makeBooking(Cargo cargo, Voyage voyage)
{
	if(!OverbookingPolicy.isAllowed(cargo, voyage))
		return -1;
	voyage.addCargo(cargo);
	return 1;
}
</code>
Make it easy to connect the code with the requirements.
Make it easy for non-techincal people to understand the high-level code.

Deep Models are models which go beyond surface-level understanding of a domain. They can be surprising, and require many iterations over lots of time to be discovered.

Frustration from your domain experts may mean that you are missing the point or the important part of their business, even if they can't put it into words yet.

"Knowledge crunching is an exploration, and you can't know where you will end up."

#Chapter 2 Communication and the Use of Language

"The model is a set of concepts built up in the heads of people on the project, with terms and relationships that reflect domain insight. These terms and interrelationships provide the semantics of a language that is tailored to the domain while being precise enough for technical development."

The model is not limited to what can be expressed by UML diagrams. It pervades every medium of communication: diagrams, requirements, documents, the code, and (especially) verbal communication.

Ubiquitous Language is the terminology used by both domain experts and developers to discuss this particular project and the domain problems it solves. It is a shared team language that developes and changes over time. A shared language means that far less knowledge is lost through translation.

The ubiquitous language must serve all needs, or it will naturally die off. It must express distinctions in the domain, and it must be consistent and precise enough for computers.
- It includes the names of classes and prominent operations.
- It includes terms for discussing business rules.
- It uses the names of patterns applied to the domain model.
- Should be usable when domain experts talk among themselves.
- Should be usable when developers discuss system design.

It takes conscious effort to create and maintain a ubiquitous language.
- Developers must keep their documentation and code and conversation up to date with the language.
- Domain experts must keep their documents and conversation up to date with the language.

The domain model can be the backbone of a ubiquitous language.
"The model relationships become the combinatory rules all languages have. The meanings of words and phrases echo the semantics of the model."

You can't just use the common jargon of the domain experts, because it contains contradictions, overlaps, and imprecise language.
You can't just use technical jargon, because it lacks the semantics of the domain.
- Developers should call out imprecision and ambiguity in domain jargon.
- Domain experts should call out incorrect or inadequate usage of domain jargon.

"Persistent use of the ubiquitous language will force the model's weaknesses into the open...To create a supple, knowledge-rich design calls for a versatile, shared team language, and a lively experimentation with language that seldom happens on software projects...The team will experiment and find alternatives to awkward terms or combinations...As gaps are found in the language, new words will enter the discussion...It is vital that we play around with words and phrases, harnessing our linguistic abilities to the modeling effort..."

Changes to the ubiquitous language are changes to the domain model.
Code will need to be refactored - and it is worth the time-investment to do so.
- rename classes, rename methods, rewrite processes

Putting effort into forming a language will make communication both faster and more precise.
Ex: Say "Routing Specification" instead of "the origin, destination, and arrival time and such..."

"Technical people often feel the need to shield the business experts from the domain model...Of course there are technical components of the design that may not concern the domain experts, but the core of the model had better interest them. Too abstract? How do you know that the abstractions are sound? Do you understand the domain as deeply as they do?...If sophisticated domain experts don't understand the model, there is something wrong with the model."

"...the process of groping towards a shared model begins. It may start out awkward and incomplete, but it will gradually get refined."

Diagrams are good at showing relationships, but not the full context and details of concepts.
Use diagrams along side full text as needed.
Use diagrams that illustrate important points. It is not useful to display so much detail that the diagram is illegible.

You simply cannot communicate the entire design of the project through UML diagrams.
- Too complete: so much detail that the main points are lost.
- Too incomplete: leaves out the larger context, behavior, and constraints.

Having a focused diagram up during discussions helps keep everyone on the same page.

"Diagrams are a means of communication and explanation, and they facilitate brainstorming. They serve these ends best if they are minimal...Comprehensive diagrams of the entire object model fail to communicate or explain; they overwhelm the reader with detail and they lack meaning...This leads us to simplified diagrams of the conceptually important parts of the object model that are essential to understanding the design...I prefer to turn things inside out - rather than a diagram annotated with text, I write a text document illustrated with selective and simplified diagrams."

Use non-standard diagrams when they are useful. UML is very generic and therefore not the best format for every domain.

"The model is not the diagram. The diagram's purpose is to help communicate and explain the model."

The code contains the complete details of the existing design. The diagrams do not need to attempt to replicate that.

"Although the behavior [of code] is unambiguous, that doesn't mean it is obvious...And developers are not the only people who need to understand the model...Well-written code can be very communicative, but the message it communicates is not guaranteed to be accurate...It takes fastidiousness to write code that doesn't just do the right things but also says the right thing."

Written documents are useful records. It takes effort to keep them up to date. It is worth the effort for well selected, useful documents.
Documents should complement code and conversation.

"A document shouldn't try to do what the code already does well...Other documents need to illuminate meaning, to give insight into large-scale structures, and to focus attention on core elements...Documents can clarify design intent...The greatest value of a design document is to explain the concepts of the model, help navigating the detail of the code, and perhaps to give some insight into the model's intended style of use...If terms explained in a design document don't start showing up in conversations and code, the document is not fulfilling its purpose...People are either not reading it or not finding it compelling."

"The thrust of this book is that one model should underlie implementation, design, and team communication. Having separate models for these separate purposes poses a hazard."

#Chapter 3 Binding Model and Implementation

Dangers of designing the model without considering implementation:
- The model has intricate relationships that cannot be implemented in code or stored in a database
- The model misses crucial discoveries about the domain that are made when implementation is taken into account
- The importance of different parts of the model will be misunderstood

If a model cannot be used to write code, then the code and model will diverge. The model will become irrelevant and the knowledge in it will likely be lost.

"...software that lacks a concept at the foundation of its design is, at best, a mechanism that does useful things without explaining its actions."

"An analysis must capture fundemental concepts from the domain in comprehensible, expressive ways...The design has to specify a set of components that can be constructed with the programming tools in use on the project that will perform efficiently in the target deployment environment and will correctly solve the problems posed for the application."

Model Driven Design: integrate the analysis model with code design to create a single model that serves both purposes.
"Each object in the design plays a conceptual role described in the model. This requires us to be more demanding of the chosen model, since it must fulfill two quite different objectives."

There are many possible ways to abstract any given domain. The task is to find one that works both as conceptual analysis and as code design.
"When a model doesn't seem to be practical for implementation, we must search for a new one. When a model doesn't faithfully express the key concepts of the domain, we must search for a new one. The modeling and design process then become a single iterative loop."

All of this effort will make the model relevent to ongoing development.

"The code becomes an expression of the model, so a change to the code may be a change to the model. Its effect must ripple through the rest of the project's activities accordingly."

"Development becomes an iterative process of refining the model, the design, and the code as a single activity...To make a Model Driven Design payoff, the correspondence must be literal, exact within the bounds of human error."

Model Driven Design is better supported by Object Oriented languages than by Procedural languages.

"Letting the bones show: why models matter to users"
A mismatch between the actual model of a system and the model that is presented to the user causes confusion and lost opportunites because 
the user will attempt incorrect intuitions about what is possible, and will not guess what is actually possible.
"When a design is based on a model that reflects the basic concerns of the users and domain experts, the bones of the design can be revealed to the user to a greater extent than with other design approaches. Revealing the model gives the user more access to the potential of the software and yields consistent, predictable behavior."

The common metaphor that programming is similar to manufacturing causes a lot of problems, because every level of programming involves design decisions, unlike workers on an assemblyline performing the same task repeatedly.
"...overseparation of responsibility for analysis, modeling, design, and programming interfers with Model Driven Design...The effectiveness of an overall design is very sensitive to the quality of consistency of fine-grained design and implementation decisions...Programmers are modelers, whether anyone likes it or not...Every developer must be involved in some level of discussion about the model and have contact with domain experts."
