##Class

#Basics

Objects are instantiated from Classes.
Objects use internal Dictionaries to store their data.

<code>
class MyEmpty:
	pass

class MyClass:
	def __init__(self, inputA):
		self.varA = inputA
		print("object initialization")
	
	def funcA(self):
		print("hey")

x = MyClass(5) #"object initialization"
print(x.varA) #5
x.funcA() #"hey"
</code>

#Dunder Methods

Dunder Methods aka Special Methods aka Magic Methods
the build in methods that start and end with double underscore (__)
such as __init__

Dunder Methods are meant to be invoked implicitly, not explicitly.

By convention, methods and variables that start with a double underscore (__) should be treated as private.

Built-in method __new__ is always run before __init__. It allocates memory and passes the object to __init__(self).

<code>
class MyClass:
	# this is called when you run "print(myClassInstance)" or "str(myClassInstance)"
	def __str__(self):
		return "string"
		
	# when you print a list or dict, __repr__ ends up getting called instead of __str__
	# so you might want to have __repr__ call __str__
	#
	# this is like __str__ but intended for developers only instead of something end users see
	# this is called when you run just the variable name in the Interactive Shell
	def __repr__(self):
		return "string"
		# example: for a date, returning "datetime.date(2022, 11, 6)" which tells you how to instantiate the object
		# it is convention to return a value that can be passed to "eval()" and result in a new object
</code>

+ __add__
* __mul__
- __sub__
% __mod__
/ __truediv__
// __floordiv__
** __pow__(self, power)
abs(x) __abs__
-x __neg__
+x __pos__
< __lt__
<= __le__
== __eq__
!= __ne__
> __gt__
>= __ge__
<< __lshift__
>> __rshift__
and __and__
or __or__
xor __xor__
not __invert__
[index] __getitem__(self, index)
in __contains__(self, value)
len __len__
str __str__
__iter__
__getitem__
__getslice__
__setitem__
__setslice__
__setitem__
__delitem__
__delslice__
__delitem__
int(x) __int__
long(x) __long__
float(x) __float__
complex(x) __complex__
divmod(x, y) __divmod__

#Attributes

All classes also have available these attributes:
<code>
print(x.__class__) #outputs <class '__main__.MyClass'>
print(a.__dict__) #outputs {'varA': 5}
</code>

Testing if an object has an attribute:
<code>
if hasattr(widget, 'attribute'):
	print(widget.attribute)
</code>

Instance attributes
- no privacy option
- naming convention is __var__ to indicate the variable should be treated as private
<code>
class MyClass:
	def __init__(self):
		self.instance_variable = 3;

	def print(self):
		print(self.instance_variable)

x = MyClass()
x.print() #"3"
print(x.instance_variable) #"3"
print(hasattr(x, "instance_variable")) #"True"
</code>

Class attributes (called Static variables in C#)
- no privacy option
- value can change
- editing a class variable affects all instances of the class
- class_var and self.class_var are different variables
<code>
class MyClass:
	class_variable = 4;

	def __init__(self):
		self.class_variable = 3;
		
	def print(self):
		print(MyClass.class_variable, self.class_variable)

x = MyClass()
x.print() #"4 3"
MyClass.class_variable = 5
x.print() #"5 3"
</code>

Attribute Lookup Chain: an object instance will search its own __dict__ for an attribute, then it will look in its class' __dict__
<code>
class MyClass:
	x = 4;

	def __init__(self):
		self.y = 3;

myInstance = MyClass()
print(MyClass.x) #4
print(myInstance.x) #4
</code>
This is actually how methods are found, as well. The class instance is searched first, then the class is searched.

You can assign class attributes within the class, and outside the class.
You can access all attributes of a class instance.
<code>
class A(object):
	pass

a = A()
a.x = 10
a.y = "string"
print(a.__dict__) #outputs {'x': 10, 'y':'string'}
</code>

Listing all the public attributes of a class (not an instance of a class):
<code>
import random
cls = "random" # name of the class as a string
all_attributes = [x for x in dir(eval(cls)) if not x.startswith("__") and callable(eval(cls + "." + x))]
print(all_attributes)
</code>

Python does not have access modifiers Public or Private, all attributes are public.
By convention, developers should treat attributes that start with an underscore as private (_example).

To mimic encapsulation (which python does not actually enforce), write your own getters and setters for each "private" attribute.
This is as close as python gets to supporting Properties.

<code>
class Person:
	def __init__(self, name, birthDate):
		self._name = name
		self._birthDate = birthDate
	
	def get_name(self):
		return self._name
		
	def set_name(self, name):
		self._name = name
		
	def get_age(self):
		return calculate_age(self._birthDate)
</code>
This is considered sufficient protection within Python programming.

Name Mangling: put two underscores at the start of an attribute name, and Python will raise a runtime error if the attribute is accessed from outside the class.
<code>
class Person:
	def __init__(self, birthDate):
		self.__birthDate = birthDate
	
	def get_age(self):
		return calculate_age(self.__birthDate)

person = Person('1990-01-01')
print(person.__birthDate) #raises an AttributeError
</code>
This is because the actual attribute name, when it is declared with two underscores, is automatically set to "_Person__birthDate" (prefixed with an underscore and the class name).
This altered name IS still publicly available, once you know what it is.
<code>
person = Person('1990-01-01')
print(person._Person__birthDate) #prints the birth date
</code>

#Properties

Properties is one way to do Managed Attributes

"@property" is a "class decorator" using the "descriptor protocol"

<code>
class Person:
	def __init__(self, name):
		self.name = name #this uses the property name setter
		
	@property
	# this is the getter
	def name(self):
		return self._name

	@name.setter
	# this is the setter
	def name(self, name):
		self._name = name

	@name.deleter
	# this is the deleter (less common)
	def name(self, name):
		del self._name
		
person = Person('bob')
print(person.name) #properties can be accessed without parentheses
</code>

This allows you to update an attribute that started out public (person.name was directly accessing the attribute) and is now being made "private" (updated to person._name). The change will be backwards compatible, provided the property returns the same data type as the original attribute.

Note that the name of the property does not have to correlate to the name of the "private" attribute. There is no automatic magic linking them based on their names. It is, of course, best practice to give them correlated names.

In order to make a read-only property, simply do not implement the setter.
In order to make a write-only property, you must still implement the getter and setter. In the getter, raise an error.

Computed properties are properties that return a computed value, such as returning "annual salary" based on attribute "hourly wage".

#Slots

Slots are used to decrease memory allocation and to increase data access speeds.

This also results in users not being able to add more attributes to an instance. All possible attributes must be listed when "slots" is declared.
With slots, you define the full list of attributes for the object once, and no new attributes can be added by anyone.

<code>
class A(object):
	__slots__ = ['x'] #this line here

	def __init__(self, x):
		self.x = x
		
a = A(10)
a.x = 20
a.y = "string" #AttributeError: 'A' object has no attribute 'y'
</code>

Attribute __dict__ is not available when you use slots.  Print __slots__ instead to inspect the attributes.
If you define __dict__ manually, it will not be automatically filled.

Slots with inheritance:
<code>
class Person:
	__slots__ = ("name", "birthDate")
	
	def __init__(self, name, birthDate):
		self.name = name
		self.birthDate = birthDate

class Employee(Person):
	__slots__ = ("hiredDate") #this adds another attribute to theh inherited attributes
	
	def __init__(self, name, birthDate, hiredDate):
		super().__init__(name, birthDate)
		self.hiredDate = hiredDate
</code>

#Method Types

Note that methods in a class are technically attributes. You can see them listed in the __dict__ of the class.
They are of type "function".
Example: you can run a method with "MyClass.__dict__['my_method'](myClassInstance, parameter)"

(In Python 3)

Instance methods can modify the current instance, through "self".
Instance methods can modify the current class, through "self.__class__".

Class methods can modify class state, affecting all instances of the class, through "cls".

Static methods cannot modify the class nor instance state. They are primarily used to namespace a method.
Static methods are pretty much defunct since Class methods were added to Python.

<code>
class MyClass:
	#this is an Instance Method or Instance Function
	def methodA(self):
		return ("instance method called", self)
	
	@classmethod
	def methodB(cls):
		return ("class method called", cls)
		
	@staticmethod
	def methodC():
		return "static method called"
		
x = MyClass()

x.methodA()
MyClass.methodA(x) #x.methodA() really means this

x.methodB()
MyClass.methodB()

x.methodC()
MyClass.methodC()
</code>

Note that calling the default parameters "self" and "cls" is a convention, you an call them anything, but stick with the convention.

Example of using classmethod for the factory pattern
<code>
import datetime
import date
class Person:
	def __init__(self, name, age):
		self.name = name
		self.age = age
	
	@classmethod
	def fromBirthYear(cls, name, birthYear):
		return cls(name, date.today().year - birthYear)
		
x = Person("Bob", 49)
y = Person.fromBirthYear("Jane", 1978)
</code>

Factory Function aka Alternative Constructor: a class or static method that builds and returns a new instance of the class
<code>
class MyClass:
	@classmethod
	def builder(cls, param):
		return cls(param, constant) #use "cls" to instantiate a new instance instead of hardcoding the class name here
</code>

#Inheritance

Classes can inherit from multiple classes.

Method overriding: subclass methods override superclass methods of the same name.

By default, all classes implicitly inherit from "object" class.

Synonyms:
Subclass inherits from Superclass OR
Derived Class inherits from Base Class OR
Child class inherits from Parent Class

Basic inheritance:
<code>
class Person:
	def __init__(self, firstName, lastName):
		self.firstName = firstName
		self.lastName = lastName
	def GetName(self):
		return self.firstName + " " + self.lastName
	
class Employee(Person):
	def __init__(self, firstName, lastName, id):
		Person.__init__(self, firstName, lastName) #call base constructor
		self.id = id
</code>

Inspecting class relationships with built-in methods:
<code>
bob = Person('bob', 'smith')
if isinstance(bob, Person):
	print("bob is an instance of the Person class")
if issubclass(Employee, Person):
	print("Employee class is a subclass of the Person class")
</code>

You can access superclass methods from the subclass:
<code>
class Employee:
	def __init__(self, salary):
		self.salary = salary;
		
	def get_a_raise(self, percent):
		self.salary += self.salary * (percent/100)

class BonusEmployee(Employee):
	def get_a_raise(self, percent, bonus):
		super().get_a_raise(percent) #runs the superclass method first
		self.salary += bonus         #then runs specialized code
</code>
Calling "super().get_a_raise(percent)" here using MRO to determine what method to call. (This is preferred.)
Calling "Employee.get_a_raise(self, percent)" instead would lock in which inherited method to call.

Multiple Inheritance is supported in python.

Diamond inheritance: the first class inherited from takes priority over later classes in the inheritance list.
<code>
class A:
    def id(self):
        print("A")

class B(A):
    def id(self):
        print("B")
    
class C(A):
    def id(self):
        print("C")

class D(B,C):
    pass

class E(C,B):
    pass

d = D();
d.id(); #outputs B

e = E();
e.id(); # outputs C
</code>

Diamond inheritance in Python 3: 
- a subclass that overrides a superclass method takes priority over a subclass listed earlier in the inheritance list that does not override the superclass method.
- The "Method Resolution Order" (MRO) is depth-first (later generation classes first) then left-to-right as the classes are ordered in the inheritance list. (MRO is also called C3 Superclass Linearisation.)

You can view the MRO of a particular class:
<code>
print(MyClass.__mro__)
</code>

MRO example:
<code>
 #C.id takes priority even when B is earlier in the inheritance list 
 #because it is closer to D and E in the inheritance tree than A is.
class A:
    def id(self):
        print("A")

class B(A):
	pass
    
class C(A):
    def id(self):
        print("C")

class D(B,C):
    pass

class E(C,B):
    pass

d = D();
d.id(); #outputs C

e = E();
e.id(); #outputs C
</code>

This demonstrates that depth is determined as which superclass is closest to the calling class, rather than which superclass is furthest from the top-level/origin class.
<code>
class A:
    def id(self):
        print("A")

class B(A):
    def id(self):
        print("B")
    
class C(A):
    def id(self):
        print("C")

class D(C):
    def id(self):
        print("D")

class E(B,D):
    pass
	
class F(D,B):
    pass
	
 #inheritance tree:
 # A <= B <= E,F
 # A <= C <= D <= E,F

e = E();
e.id(); #outputs B

f = F();
f.id(); #outputs D
</code>

When calling base methods, there are two ways to do it in Python 3:
<code>
Person.__init__(self, firstName, lastName)
 #or
super().__init__(firstName, lastName) #super() refers the the MRO superclass
</code>
<code>
class A:
    def id(self):
        print("A")

class B(A):
    pass
    
class C(A):
    def id(self):
        print("C")

class D(B,C):
    def id(self):
        print("D")
        C.id(self)
        B.id(self)
        A.id(self)

d = D();
d.id(); # outputs D C A A
</code>

Base vs Bases
<code>
print(myInstance.__dict__["attr"])
print(type(myInstance).__dict__["attr"])
print(type(myInstance).__base__.__dict__["attr"]) #goes to base/super class, the first one in the __bases__ list

print(type(myInstance).__bases__) #full list of base classes given in subclass definition
</code>

#Composition

Composition refers to instances of objects that set attributes equal to other instances of objects.
Inheritance makes an "is a" relationship.
Composition makes a "has a" relationship.

<code>
class Schedule:
	def __init__(self, wakeUpTime, sleepTime):
		self.wakeUpTime = wakeUpTime
		self.sleepTime = sleepTime

class Person:
	def __init__(self, birthDate, schedule):
		self.birthDate = birthDate
		self.schedule = schedule #this is the composition part
		
schedule = Schedule(8, 10)
person = Person('2000-1-1', schedule)
</code>

#Mixin Class

Mixin classes are not enforced by python, they are a naming convention.
Adding the "Mixin" suffix to a class name indicates that the class is intended to be used in multiple inheritance to add a little boilerplate functionality to many classes.
Example: to adding logging methods, or reflection (self-inspection) methods, or some other set of utilities.

<code>
class ReflectionMixin:
	#methods here for commonly used reflection utilities
</code>

#Metaclass

An instance of a metaclass is a class.
All metaclasses must inherit from "type" instead of "object".
<code>
required = True

class MyMetaClass(type):
	def __init__(cls, clsname, superclasses, attributedict):
		if required:
			cls.myAttribute = "Required"
		else:
			cls.myAttribute = "Optional"

class A(metaclass=MyMetaClass):
	pass
	
required = False

class B(metaclass=MyMetaClass):
	pass
	
a = A()
print(a.myAttribute) #outputs Required

b = B()
print(b.myAttribute) #outputs Optional
</code>
In this example, A and B inherit from different instances of MyMetaClass. The behavior of the instances they inherit from was changed by the state of the program.

You can use a metaclass to create a Singleton object:
<code>
class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]
    
class SingletonClass(metaclass=Singleton):
    pass

class RegularClass():
    pass

x = SingletonClass()
y = SingletonClass()
print(x == y) #outputs True

x = RegularClass()
y = RegularClass()
print(x == y) #outputs False
</code>
But since you can do the same thing with normal classes, why use metaclasses?
<code>
class Singleton(object):
    _instance = None
    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = object.__new__(cls, *args, **kwargs)
        return cls._instance
    
class SingletonClass(Singleton):
    pass

class RegularClass():
    pass

x = SingletonClass()
y = SingletonClass()
print(x == y) #outputs True

x = RegularClass()
y = RegularClass()
print(x == y) #outputs False
</code>

Using metaclass to automatically apply a decorator to every method in each subclass:
<code>
class FuncCallCounter(type):
    #this metaclass will decorate all the methods of the subclass with "call_counter"
    
    @staticmethod
    def call_counter(func):
        # decorator for counting the number of function/method calls
        def helper(*args, **kwargs):
            helper.calls += 1
            return func(*args, **kwargs)
        helper.calls = 0
        helper.__name__= func.__name__
        return helper
    
    
    def __new__(cls, clsname, superclasses, attributedict):
        for attr in attributedict:
            if callable(attributedict[attr]) and not attr.startswith("__"):
                attributedict[attr] = cls.call_counter(attributedict[attr]) #applying decorator to subclass method
        return type.__new__(cls, clsname, superclasses, attributedict)
    
class A(metaclass=FuncCallCounter):
    
    def B(self):
        pass
    
    def C(self):
        pass

x = A()
print(x.B.calls, x.C.calls) #outputs 0 0

x.B()
print(x.B.calls, x.C.calls) #outputs 1 0

x.B()
x.C()
print(x.B.calls, x.C.calls) #outputs 2 1
</code>

#Abstract Class

Python does not automatically support abstract class, but it does provide a module that supports it.
Module "abc" stands for "abstract base class"
<code>
from abc import ABC, abstractmethod
 
class MyAbstractClass(ABC): #must inherit from ABC
 
    def __init__(self, value):
        self.value = value
        super().__init__() #not required
    
    @abstractmethod #must contain at least one abstractmethod
    def do_something(self):
        pass
		
class A(MyAbstractClass):

	def do_something(self):
		print("do something")
		
a = A(10)
a.do_something() #outputs do something

b = MyAbstractClass(10) #TypeError: Can't instantiate abstract class MyAbstractClass with abstract methods do_something
</code>

A class that inherits from ABC but does not contain any abstractmethods is not treated as abstract.

Abstract classes are allowed to contain non-abstractmethods. Inheritance of these methods works like normal inheritance.

A class that inherits from an abstract class must override all abstractmethods of that class. Or it must inherit all those methods from elsewhere before inheriting from the abstract class.
<code>
from abc import ABC, abstractmethod
 
class MyAbstractClass(ABC):
 
    def __init__(self, value):
        self.value = value
    
    @abstractmethod
    def do_something(self):
        pass
		
class A():
	
	def do_something(self):
		print("do something")
		
class B(A, MyAbstractClass):
	pass
		
b = B(10)
b.do_something() #outputs do something
</code>

Abstract methods may contain default behavior. The inheriting subclass must still override the abstract method, but can call the default behavior:
<code>
from abc import ABC, abstractmethod
 
class MyAbstractClass(ABC):
 
    def __init__(self, value):
        self.value = value
    
    @abstractmethod
    def do_something(self):
        print("abstract do something")
		
class A(MyAbstractClass):
	
	def do_something(self):
		super().do_something()
		
a = A(10)
a.do_something() #outputs abstract do something
</code>

#Data Class

When a class is just a data container, where the __init__ method just sets attributes equal to parameters of the same name, and the attributes are all public, then you could make a Data Class instead.

<code>
from dataclasses import dataclass

@dataclass
class MyClass:
	myString: str #btw this is a Type Hint
	myInt: int
	myOtherString: str
</code>
This will define a class that expects 3 parameters on initialization, and sets them to these attributes.

You can still define methods in data classes
<code>
from dataclasses import dataclass

@dataclass
class MyClass:
	myString: str
	
	def myMethod(self):
		return 0
</code>

Python 3.10+
you tell that data class you want slots like this
<code>
from dataclasses import dataclass

@dataclass(slots=True)
class MyClass:
	myString: str
</code>

#Descriptors

A descriptor is a Python object that implements at least one of the methods in the descriptor protocol.
Descriptors run special behavior (binding behavior) when they are accessed as attributes of another object.

Descriptors are instantiated just once per class. (All instances of the class share one instance of the descriptor)

Uses for descriptors: lazy loading, logging, validation, code reuse. But can be very illegible, code maintainers would need to be well versed in the system's architecture, because you are inventing your own syntax sugar / magic.

Descriptor Protocol
<code>
__get__(self, obj, type=None) -> object
__set__(self, obj, value) -> None
__delete__(self, obj) -> None
__set_name__(self, owner, name) #added in Python 3.6
</code>
A non-data descriptor implements just __get__.
A data descriptor implements __set__ or __delete__. Data descriptors have precedence during the lookup process.
Here, "self" is the instance of the descriptor object.
Here, "obj" is the instance of the object the descriptor is attached to.
Here, "type" is the type of the object the descriptor is attached to.
Here, "name" is the name of the attribute that this descriptor was assigned as instantiation.

A bit of a convoluted example for pre-python 3.6:
<code>
class MyDescriptor():
    def __init__(self, name):
        self.name = name #this would be handled in __set_name__ once that method was added in Python 3.6

    def __get__(self, obj, type=None) -> object:
        return obj.__dict__.get(self.name) or 0 #set instance attribute

    def __set__(self, obj, value) -> None:
        obj.__dict__[self.name] = value #get instance attribute

class MyClass():
    number = MyDescriptor("number") #set class attribute
	
myInstance = MyClass() #stores the descriptor in type(myInstance).__dict__["number"]
myInstance.number = 5 #stores "5" in myInstance.__dict__["number"]
print(myInstance.number) #prints "5"
</code>

Example
<code>
class Verbose_attribute():
    def __get__(self, obj, type=None) -> object:
        print("accessing get")
        return 42
		
    def __set__(self, obj, value) -> None:
        print("accessing set")
        raise AttributeError("Cannot change the value")

class Foo():
    attribute1 = Verbose_attribute() #descriptor will be accessed as an attribute of another object

my_foo_object = Foo()
x = my_foo_object.attribute1 #prints "accessing get"
print(x) #prints "42"
</code>

Example of descriptor set with decorator, also an example of lazy loading taking advantage of the attribute lookup chain:
<code>
import time

class LazyProperty:
	def __init__(self, function):
		self.function = function
		self.name = function.__name__

	#just "get" is defined, so this is a non-data descriptor, which shows up later in the attribute lookup chain
	def __get__(self, obj, type=None) -> object:
		obj.__dict__[self.name] = self.function(obj)
		return obj.__dict__[self.name]

class DeepThought:
	@LazyProperty
	def meaning_of_life(self):
		time.sleep(3)
		return 42

my_instance = DeepThought()
print(my_instance.__dict__) #at this point, the instance has no __dict__ values
print(my_instance.meaning_of_life) #this runs class's meaning_of_life method and stores the result in the instance's __dict__
print(my_instance.__dict__) #now the instance has __dict__["meaning_of_life"] set
print(my_instance.meaning_of_life) #lookup chain finds instance.__dict["meaning_of_life"] and does not progress to class's __dict__
</code>
Result: the slow "meaning_of_life" method is only run once per instance of DeepThought.

Example of descriptor for code reuse and ?possibly? memory allocation reduction
<code>
class UpperCaseProperty:
	def __set_name__(self, owner, name):
		self.name = name
	def __get__(self, obj, type=None) -> object:
		return obj.__dict__.get(self.name) or ""
	def __set__(self, obj, value) -> None:
		obj.__dict__[self.name] = value.upper()
		
class Person:
	last_name = UpperCaseProperty()
	
	def __init__(self, first):
		self.first_name = first
		
p = Person('bob')
p.last_name = 'smith'
p2 = Person('jane')
p2.last_name = 'doe'
print(p.first_name) #bob
print(p.last_name) #SMITH
print(p2.first_name) #jane
print(p2.last_name) #DOE
</code>
It certainly feels clunky to need to define the special properties partly at the class level, and only set them implicitly at the instance level. This is not very legible.

Example: directory size utility
<code>
import os

class DirectorySize:
    def __get__(self, obj, objtype=None):
        return len(os.listdir(obj.dirname))

class Directory:
    size = DirectorySize()
    def __init__(self, dirname):
        self.dirname = dirname

s = Directory('songs')
g = Directory('games')
print(s.size) #outputs size of "songs" directory
print(g.size) #outputs size of "games" directory
</code>

Properties are an example of descriptors.
Properties are syntactic sugar.
<code>
"""
With properties
"""
class Foo():
    @property
    def attribute1(self) -> object:
        print("accessing get")
        return 42

    @attribute1.setter
    def attribute1(self, value) -> None:
        print("accessing set")
        raise AttributeError("Cannot change the value")

"""
With plain descriptors
"""
class Foo():
    def getter(self) -> object:
        print("accessing get")
        return 42

    def setter(self, value) -> None:
        print("accessing set")
        raise AttributeError("Cannot change the value")

    attribute1 = property(getter, setter)
	
	#full property signature
	#property(fget=None, fset=None, fdel=None, doc=None) -> object
	#property returns an object that implements the descriptor protocol
</code>

Methods are also syntactic sugar over functions/attributes/descriptors.
obj.method(*args) can be called as method(obj, *args) because of a _get_ descriptor. Methods are non-data descriptors.
<code>
import types

class Function(object):
    def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        return types.MethodType(self, obj)
</code>

#Attribute Lookup Chain

(Methods are also attributes of objects)

The full attribute lookup chain for attribute "Name":
- the result returned from the __get__ method of the data descriptor named Name
- the value of your object’s __dict__["Name"]
- the result returned from the __get__ method of the non-data descriptor named Name
- the value of your object type’s __dict__["Name"]
- the value of your object parent type’s __dict__["Name"]
- then the previous step is repeated for all the parent’s types in the method resolution order of your object
- then an AttributeError exception.

#Class Decorators

Very similar to Function Decorators; the decorator function will receive a class object instead of a function object.

Decorating a class does not decorate its methods.

Example
<code>
class Counter:
	def __init__(self, start=0):
		self.count = start
	def __call__(self): #executed when you "call" an instance of the class
		self.count += 1
		print(f"Current count is {self.count}")
		
x = Counter()
x() #outputs "Current count is 1"
x() #outputs "Current count is 2"
</code>

Example of a class decorator being applied to a function:
<code>
import functools

class CountCalls:
	def __init__(self, func):
		functools.update_wrapper(self, func)
		self.func = func
		self.num_calls = 0
	def __call__(self, *args, **kwargs):
		self.num_calls += 1
		print(f"Call {self.num_calls} of {self.func.__name__}()")
		return self.func(*args, **kwargs)
		
@CountCalls
def hello():
	print("hello")
	
hello()
print(hello.num_calls)
</code>
