##Functions

Functions must be defined before they are called (higher in the text file).
Functions that are in an imported file can call each other in any order.

<code>
def funcName(): #definition
	print("my function")
	
funcName() #invocation
</code>

Empty function:
<code>
def empty():
	pass
</code>

#First Class

Functions are first class objects in Python.

They can be passed as arguments.
They can be returned from functions.

They can be nested within other functions.
Nested functions are only in-scope to their direct parent.
Nested functions have access to parent variables.

#Scope

Variables assigned a value anywhere in the function are assumed local, unless explicitly declared global.
<code>
x = 1

def funcA():
	global x
	x = 2
	print(x) #prints 2
	
funcA()	
print(x) #prints 2
</code>

Declaring a new variable global within a function will define it as a global variable, but you should not rely on this because the variable does not exist until the function is run
<code>
def funcA():
	global x
	x = 2
	print(x)
	
funcA()	
print(x) #throws an error if funcA is not run first
</code>

#Method Overloading

Python does not support method overloading.

This example won't work, because the last function definition overwrites the earlier ones of the same name.
<code>
 #!!! This won't work !!!
def myFunc(a):
	print("a")
def myFunc(a, b):
	print("a b")
def myFunc(a, b, c):
	print("a b c")
myFunc(1)
myFunc(1, 2)
myFunc(1, 2, 3)
</code>

#Monkey Patching

Monkey patching is overwriting the behavior of a function or object after it is defined. Do not do this.

#Default Parameters

You can use default parameter values to get close to method overloading.

<code>
def myFunc(a, b=None, c=None):
	if c == None:
		if b == None:
			print(a)
			return
		print(a, b)
		return
	print(a, b, c)
myFunc(1)
myFunc(1, 2)
myFunc(1, 2, 3)
</code>

#Passing Parameters

Python passes all arguments as pass-by-object-reference.  That means that all object operations used in a function will affect the original argument, except for instantiation.

Immutable objects are de-facto pass-by-value because any edit operation automatically re-instantiates the object.

<code>
def funcA(listA):
	listA.append("a") #most object operations affect the original argument
def funcB(listB):
	listB = ["b", "b", "b"] #instantiate does not affect the original argument

x = [1, 2, 3]
print(x) #[1, 2, 3]

funcA(x)
print(x) #[1, 2, 3, "a"]

funcB(x)
print(x) #[1, 2, 3, "a"]
</code>

#Strict Signatures

Use strict signatures to enforce usage standards for how to pass arguments to methods. This can protect callers from breaking changes as the argument list of a function changes over time.
- For instance, any parameters that are likely to be removed later, or to be reordered for the legibility of the function signature, can be marked as "keyword passing only" so that calling code is not broken by changes to the function.
- "positional passing only" parameters should be completely solid arguments that are central to the use case of the function, and the function call should be legible without seeing their argument names.
- Can ensure all calls to the function are formatted consistently.

Force all callers to use positional passing for the parameters left of the "/"
<code>
def funcA(paramA, paramB, /, paramC, paramD):
	something
	
 # ways to all the function	
funcA("a", "b", "c", "d")
funcA("a", "b", "c", paramD="d")
funcA("a", "b", paramC="c", paramD="d")
</code>

Force all callers to use keyword passing for the parameters right of the "*"
<code>
def funcA(paramA, paramB, *, paramC, paramD):
	something
	
 # ways to all the function	
funcA("a", "b", paramC="c", paramD="d")
funcA("a", paramB="b", paramC="c", paramD="d")
funcA(paramA="a", paramB="b", paramC="c", paramD="d")
</code>

Doing both at once
<code>
def funcA(paramA, paramB, /, *, paramC, paramD):
	something

 # ways to all the function	
funcA("a", "b", paramC="c", paramD="d")
</code>

#*args **kwargs

args is a tuple containing an undefined number of function arguments.

kwargs is a dictionary containing an undefined number of named (aka keyword) arguments.

<code>
def myMethod(a, b, *args, **kwargs):
	print(a)
	print(b)
	print(args)
	print(kwargs["name"])

myMethod(1, 2, 3, 4, 5, name="Bob", age=6)
	#prints:
	#1
	#2
	#(3, 4, 5)
	#Bob
</code>

"args" and "kwargs" are conventions. You can call these parameters anything you want, provided they start with "*" and "**".

You cannot list normal parameters between the *args and *kwargs.

You cannot enter keyword arguments into the *args tuple, and you cannot enter normal arguments into the **kwargs dictionary.

#Closures

aka Inner Functions

Functions can be defined within in functions in Python, like in Javascript.

The inner function has access to the outer function's local variables and parameters, even after the outer function has completed.
The inner function is not defined until the outer function is run.

See Javascript notes about closures.

#Lambda

Lambdas are single-expression, anonymous functions. They do not use a "return" keyword, they simply return the result of their single expression, if any.

<code>
myDisplay = lambda: print("hey")
myDisplay() #prints "hey"

myCalc = lambda: 5 + 3
print(myCalc()) #prints 8
</code>

Lambdas with parameters:
<code>
myCalc = lambda x: x + 3
print(myCalc(6)) #prints 9

myCalc = lambda x, y, z: x + y + z
print(myCalc(3, 4, 5)) #prints 12
</code>

#Type Hinting

Python 3.5 and higher.

Specify what parameter types are expected, and what type will be returned.

The types of parameters passed in are checked at runtime; sending in the wrong type will result in a TypeError exception.
Subtypes of the specified type are accepted.

The return type is not verified, so you can actually return any value you want.

<code>
	#expects a string parameter, and returns a string
	def hello_world(name: str) -> str:
		return(f"Hello {name}")
</code>

Python 3.5.2 and higher: type hinting for function signatures.
<code>
	from typing import Callable

	#parameter is expected to be a function that accepts two integers as arguments and returns a string
	def method_a(callback: Callable[[int,int],str]) -> None:
		print(callback(1,2))

	#parameter is expected to be a function (with any arguments) that returns a string
	def method_b(callback: Callable[...,str]) -> None:
		print(callback([], "a", 1)
</code>

When any type is acceptable
<code>
from typing import Any

def myFunction(param: Any):
	pass
</code>

You can install (with pip) and use mypy to verify a python file is being consistent to the type hints.

#Type Aliasing

Python 3.5 and higher. Related to type hinting.

You can define an alias for a type, and then use the alias anywhere you'd use the type.

<code>
	MyAlias = str

	def hello_world(name: MyAlias) -> MyAlias:
		return(f"Hello {name}")

	print(hello_world("Bob")) #outputs "Hello Bob"
	print(hello_world(1))     #throw TypeError
	</code>

	Example from documentation:
	<code>
	from typing import List, Dict, Tuple, Sequence

	Vector = List[float]
	ConnectionOptions = Dict[str,str]
	Address = Tuple[str,int]

	#these alias can be used to enforce parameter types
</code>

#New Type

Python 3.5 and higher. (Maybe belongs in a different section of notes)

Easily define a new subtype of a type, with a distinct name.

<code>
from typing import NewType

UserId = NewType('UserId', int)
</code>

Note that using UserId in an operation will return an int.

#Generators

Generator functions are used to gradually access a large data set without loading the whole thing into memory at one time.
Or to generator an infinite sequence.
Or for a function that needs to maintain an internal state, but it is so small you don't want to create a class for it.

Generator functions return a Lazy Iterator.
A lazy iterator is an object you can loop over with the list syntax.

Generator Function to read a large file
<code>
def file_reader(file_name):
	for row in open(file_name, "r"):
		yield row
		
reader = file_reader("name.txt")
for line in reader:
	print(line)
</code>

Generator Comprehension or Generator Expression
<code>
reader = (row for row in open("name.txt"))
</code>
Note that list comprehensions are surrounded by [] while generator comprehensions are surrounded by ().
A list comprehension can be faster to evaluate, assuming the result fits in memory.

generating an infinite sequence
<code>
def infinite():
	n = 0
	while True:
		yield n #the function will pause here until you call for the next item
		n += 1

infinite_generator = infinite()
print(next(infinite_generator)) #0
print(next(infinite_generator)) #1
print(next(infinite_generator)) #2
</code>

If you try to get a next value past the end of the generator's iteration, you'll get a StopIteration error.

Coroutine: You can send a value back to the generator
<code>
def gen():
	n = 0
	while True:
		n = (yield n)
		n += 1

g = gen()
print(next(g)) #0
g.send(5)
print(next(g)) #6
</code>

Tell a generator to stop
<code>
g = gen()
for i in gen:
	if i > 100:
		gen.close()
</code>

There also a .throw() command.

Example of using generators to build a data pipeline
Given a very large csv file:
<code>
line_gen = (line for line in open("big_file.csv"))
column_gen = (line.rstrip().split(",") for line in line_gen)
column_names = next(column_gen) #first line is the column names
data_dict_gen = (dict(zip(column_names, fields)) for fields in column_gen) #create a dict for one line of data using the column names as keys

 #if you want the dollar amount raised in round "a"
funding = (
	int(data["raised_amount"])
	for data in data_dict_gen
	if data["round"] == "a"
)
funding_total = sum(funding)
</code>

#Function Decorators

A decorator function takes in another function and can run code before and after running the passed-in function.
So a decorator is a function wrapper.

Use cases: logging, timers, metrics, try-again loops, rate limiting, authorization, caching, ...

Example
<code>
def i_am_wrapper(func):
	def inner():
		print('start')
		func()
		print('end')
	return inner

def i_am_wrapped():
	print('wrapped')

i_am_wrapper(i_am_wrapped)() #outputs the three statements
</code>
The same thing with the decorator syntax
<code>
def i_am_wrapper(func):
	def inner():
		print('start')
		func()
		print('end')
	return inner

@i_am_wrapper
def i_am_wrapped():
	print('wrapped')

i_am_wrapped() #outputs the three statements
</code>

Nested Decorators
You can put more than one decorator on a function, they will nest
<code>
def wrapper_a(func):
	def inner():
		print('start A')
		func()
		print('end A')
	return inner

def wrapper_b(func):
	def inner():
		print('start B')
		func()
		print('end B')
	return inner

@wrapper_a
@wrapper_b
def i_am_wrapped():
	print('wrapped')

i_am_wrapped() #outputs start A, start B, wrapped, end B, end A
</code>

To pass through a variable number of parameters:
<code>
def wrapper_a(func):
	def inner(*args, **kwargs):
		print('start A')
		func(*args, **kwargs)
		print('end A')
	return inner

@wrapper_a
def i_am_wrapped(text):
	print('wrapped: ' + text)
</code>

To pass through a returned value:
<code>
def wrapper_a(func):
	def inner(*args, **kwargs):
		print('start A')
		result = func(*args, **kwargs)
		print('end A')
		return result
	return inner

@wrapper_a
def i_am_wrapped(text):
	print('wrapped: ' + text)
	return "done"
	
print(i_am_wrapper('yo'))
</code>

A decorated function is actually set to the wrapper function that is returned from the decorator.
So looking at __name__ on the function will not give the data you expect.
To provide the expected data:
<code>
import functools

def wrapper_a(func):
	@functools.wraps(func)
	def inner(*args, **kwargs):
		return = func(*args, **kwargs)
	return inner
</code>

Decorators with arguments - requires another layer of function
<code>
def repeat(times):
	def repeat_func(func):
		def inner():
			for _ in range(times):
				func()
		return inner
	return repeat_func

@repeat(times=4)
def hello():
	print("hello")
</code>
(Ugh, why isn't the syntax just "repeat(func, times)"?)

Decorators with optional arguments
<code>
def repeat(_func=None, *, times=1):
	def decorator(func):
		def inner():
			for _ in range(times):
				func()
		return inner
	if _func is None:
		return decorator
	return decorator(_func)

@repeat(times=4)
def hello():
	print("hello")

@repeat
def goodbye():
	print("goodbye")
</code>

Example: debugging help
<code>
import functools

def debug(func):
	"""Print the function signature and return value"""
	@functools.wraps(func)
	def wrapper_debug(*args, **kwargs):
		args_repr = [repr(a) for a in args]
		kwargs_repr = [f"{k}={repr(v)}" for k, v in kwargs.items()]
		signature = ", ".join(args_repr + kwargs_repr)
		print(f"Calling {func.__name__}({signature})")
		value = func(*args, **kwargs)
		print(f"{func.__name__}() returned {repr(value)}")
		return value
	return wrapper_debug
</code>

Example: register a function and then return it as-is
<code>
PLUGINS = dict()

def register(func):
	"""Register a function as a plug-in"""
	PLUGINS[func.__name__] = func
	return func
</code>

Because this is creating Closures, you can maintain state within the decorator function.
Ex: keep a count of how many times the decorated function has been called.