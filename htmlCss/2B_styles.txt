##Styles

#Order of Precedence

From most important to least important:
1) Inline CSS
2) A Selector Rule Marked !important
3) More Specific Selectors override Less Specific Selectors
	3a) Ids
	3b) Classes
	3c) Elements/Tags
4) Later Rules override Earlier Rules

#CSS Selectors

Multiple selectors:
<code>
selecterA, selectorB { }
</code>

Element has tag name:
<code>
div { }
</code>

Element has id:
<code>
 #myId { }
</code>

Element has class:
<code>
.myClass { }
</code>

Element has both classes:
<code>
.classA.classB { }
</code>

Direct descendants:
(any div tag that is a direct child of a "classA" tag)
<code>
.classA > div { }
</code>

Any descendants
(any div tag that is somewhere within a "classA" tag)
<code>
.classA div { }
</code>

Pseudo-elements:
style a part of an element
<code>
p::first-letter
p::first-line
</code>

Pseudo-classes:
style an element based on its state
<code>
a:hover
a:hover:after
button:hover
span:before
</code>
inline example
<code>
<a style='hover:text-decoration:none;'></a>
</code>

Attribute exists
<code>
[data-category]
</code>

Attribute value equals
<code>
[data-category="Book"]
</code>

Attribute contains substring
<code>
[data-category*="Book"]
</code>

Attribute contains whole-word
<code>
[data-category~="Book"]
</code>
Matches "Paperback Book" but not "Books" nor "My-Book"

Attribute value starts with whole-word
<code>
[data-category|="Book"]
</code>
Matches "Book" and "Book-On-Order" but not "Books"

Attribute value starts with
<code>
[data-category^="Book"]
</code>

Attribute value ends with
<code>
[data-category$="Book"]
</code>

Multiple attribute selectors
<code>
[data-category="Book"][name="Customer"]
</code>

#Cursor

Change cursor to pointer icon when user hovers over a table cell.
<code>
	td:hover {
		cursor: pointer;
	}
</code>

Display a custom cursor. The image be small; 16x16 pixels worked in testing.
<code>
	body {
		cursor: url(images/myCursor.png),auto;
	}
</code>
You can change the location of the cursor so it is centered over the hotspot correctly.
<code>
	body {
		//delta x=5 delta y=10
		cursor: url(images/myCursor.png) 5 10,auto;
	}
</code>

#Show/Hide

Show element. Block means it acts like a div. Inline means it acts like a span.
<code>
	div.a {
		display: block;
	}
	div.b {
		display: inline;
	}
</code>

Hide element
<code>
	div {
		display: none;
	}
</code>

#Backgrounds

<code>
div {
	background-image: url(path/to/image.jpg);
	background-size: 325px;    /*resize the background image before tiling*/
	background-repeat: repeat; /*tiling*/
}
</code>
background images will fill the space, they will not alter the size of the space
