##Components

React components are independent, reusable, auto-updating pieces of a web application.
A component is an instruction for how the GUI should be rendered.

React components are structured as Javascript functions that accept properties and return React elements (JSX).
JSX syntax resembled HTML but it is javascript, and extension of javascript.
JSX must be transformed to Javascript with a tool like Babel.

example: one component
<code>
const Banner = () => <h1>This is a banner</h1>;
//the above JSX is translated to the below Javascript
const Banner = () => React.createElement('h1', null, 'This is a banner');
</code>

Each component must return JSX with a single parent element.
If you don't want, like, an extra div messing up your layout:
<code>
const B = () => {
	<React.Fragment> //Fragment
		<div></div>
		<div></div>
	<React.Fragment/>
};

const A = () => {
	<> //Empty Node is shorthand for a Fragment
		<div></div>
		<div></div>
	</>
};
</code>

example: component composition
<code>
const Greeting = () => (
	<div>	//invoking a built-in component
		<Banner />	//invoking that previous component
		<h2 className='highlight'>Greetings</h2>
	</div>
);
</code>

example: the component is a function, it doesn't have to return immediately
<code>
const Component = () => {
	var x = 5;
	var jsx = <span>Hello World</span>;
	
	return (
		<div>
			{x}
			{jsx}
		</div>
	);
};
</code>

Javascript Expressions
<code>
var imgSrc = "string";
var divStyles = {
	fontStyle: "italic",
	fontSize: "x-large",
};

const MyComponent = () => {
	<div className='container'> //"className" means "class" but class is a keyword in JS
		<img src={imgSrc} /> //the {} here is a Javascript Expression within JSX
		<div style={divStyles}>
		</div>
		<div style={{fontStyle:"italic"}}> //{{}} means an Inline Object inside the Javascript Expression
		</div>
	</div>
};
</code>

#Naming

Always start component names with a capital letter.
PascalCase

JSX will interpret capitalized tag names as references to components.

The built-in components are camelCase, the first letter being lowercase.

#Mount/Unmount

Mounting is when a component's state is initialized in memory, the component is rendered, and the html is added to the browser DOM.

Unmounting is when the component's html is removed from the DOM and the component's memory is released.
Component state is lost.

#Function Components

Function components are the simplest examples.

Component functions should be pure functions - the same input always produces the same output.

<code>
function Welcome(props) 
{
	return <h1>Hello, {props.name}</h1>;
}
</code>

Usage:
<code>
//component
function Welcome(props) 
{
	return <h1>Hello, {props.name}</h1>;
}
//element references component
//all attributes are passed to "Welcome()" as "props"
const element = <Welcome name="Sara" />;
//render
ReactDOM.render(
	element,
	document.getElementById('root')
);
</code>

If your component returns "null" instead of a React element, nothing will be rendered for it. This can be used to hide components.

#Props

Pass arguments into a component:
<code>
const Component = (props) => {
	<div>
		{props.myprop}
	</div>
};

<Component myprop="value" /> //passing a prop into a component
</code>

"props" are to be treated as read-only, always.
Consider "pure" functions, which do not change their inputs and always return the same output when given the same input.
All React components must be pure in respect to their "props".

<code>
const Component = (props) => {
	<div className="header">
		{props.children}
	</div>
};

<Component>Hello World</Component> //the innerHTML is auto-passed as props.children
</code>

detail: this is destructuring "props" as it comes into the component function
<code>
const Component = ({children}) => {
	<div className="header">
		{children}
	</div>
};

<Component>Hello World</Component> //the innerHTML is auto-passed as props.children
</code>

deeper destructuring:
<code>
var widget = {
	name: 'steve',
	age: 5,
};
const Component = ({widget: { name, age}}) => {
	<div className="header">
		{name}
	</div>
};
<Component widget={widget} />

//or
const Component = ({{ name, age}}) => {

//or use spread to pass in the properties of widget as individual props
<Component {...widget} /> //but this can impact performance as unneeded props are passed in
</code>
or use spread to pass in the properties of widget as individual props

Best practice: use destructuring syntax for receiving props in a component, to ensure that the component cannot accidentally display data that was passed to it but it should not have:
<code>
//calling the component
const data = {
	favColor: "red",
	age: 55,
	ssn: "000-000-0000",
};
return (<MyComponent {...data} />);

//declaring component
function MyComponent({favColor, age}) {
	console.log(JSON.stringify(props));
	return(<div></div>);
}
</code>

#Hooks

A hook is a function with a name starting "use".
It encapsulates complexity.
There are many built-in hooks.

First Rule Of Hooks: Hooks should only be called at the top level.
- do not call them conditionally, like inside an IF statement
- do not call them after an optional RETURN statement in a function
This is so they will always be called in the same order each time the component executes.

Second Rule Of Hooks: Hooks should only be called from inside function components.
- exception: a custom hook may call other hooks

hook structure
<code>
useCustomHook(() => {
	//this code runs when the component renders
	
	//having a return is optional
	return () => { 
		//this code executes only when the component is leaving the screen
	};
}, []); //dependency array
<code>
A null dependency array means the "when component renders" code runs every time the component renders.
An empty ([]) dependency array means the "when component renders" code is only run on the first render.
A filled dependency array means the "when component renders" code is run on the first render, and any time an element of that array is edited.

You can create custom hooks to separate concerns (such as fetching a list of data and displaying it)
<code>
//put custom hooks under a ./project/hooks/ directory
//hook functions start with "use" prefix
import { useState, useEffect } from "react";

export const useHouses = () => {
	const [houses, setHouses] = useState([]);
	
	useEffect(() => {
		//fetch house data
		//call setHouses(data)
	}, []);
	
	return { houses, setHouses };
};
//in the houses component
import useHouses from "../hooks/useHouses";

const HouseList = () => {
	const { houses, setHouses } = useHouses();
	
	//display houses
};
</code>
Hooks do not return JSX.
Hooks may call other hooks.

When a hook's state changes, any component that calls on that hook will re-render.

When a hook is called from multiple components, each component keeps a separate instance of the hook's state - they do not share data or affect each other.

#Built-in Hooks

Basic hooks: useState, useEffect, useContext

Additional hooks: useReducer, useCallback, useMemo, useRef, useImperativeHandle, useLayoutEffect, useDebugValue, useDeferredValue, useTransition, useId

Library hooks (for building libraries): useSyncExternalStore, useInserationEffect

useEffect cannot be called async, but it can call an async function
<code>
useEffect(() => {
	async function myAsync() {
	}
	myAsync();
}, []);
</code>

#State

State is data held internally and privately by a component.
<code>
this.state
</code>
Every time the state of a component changes, the component function is run again. The "useState" lines will be skipped on re-runs.
The reconciliation step means only the parts of the JSX that changes will be updated in the browser.

Register variables within a component, and when they are edited the component will refresh.
<code>
var integers = [1,2,3];
const Component = () => {
	const [_integers, setIntegers] = useState(integers); //hook useState returns the internal object and a function for updating it
	
	const addInteger = () => {
		setIntegers([..._integers, (_integers.Length+1)]); //do NOT edit "_integers" directly
	};	
		
	return (
		<>
			{_integers.map((i) => "Number "+i+"<br/>")}
			<button onClick={addInteger}>Add</button>
		</>
	);
};
</code>
Call "setIntegers" to tell React to re-render the component.
You can use "setState" multiple times within a component.
For reference-type variables (like arrays), React will refresh when the reference is changed.  For primitive-types (like int), React will refresh when the value is changed. In both cases, the refresh will only occur if you use the variable somewhere in your JSX.

For rapid updates to primitive state values:
<code>
const [counter, setCounter] = useState(0);
setCounter(current => counter + 1);
</code>
React will batch the calls to setCounter. Using "current" will ensure that each call uses the updated value from the previous call.

Reserve this object for state information about your component.

You can only assign directly to "this.state" in the constructor.

Changing "this.state" directly will not cause the element to be re-rendered.
Use "this.SetState(object)" instead.

Reset the entire state of the component:
<code>
this.setState(object);
</code>
"setState" will merge the provided object into the current state, so you can update single variables at a time without losing the others.

Updates to "this.props" and "this.state" are managed by React asynchronously, and may be paused or batched.
If the "next" state values are calculated based on the "current" values, you must use this:
<code>
this.setState((state, props) => ({
	counter: state.counter + props.increment
}));
</code>

#useReducer

useReducer is similar to useState
<code>
const [state, dispatch] = useReducer(reducer, initialArg, init);
</code>
state: local component state managed by the reducer
dispatch: a function - the first param passed to dispatch will be the second param passed to reducer
reducer: function(state, action) returns a new state - should be pure but is not required
initialArg: starting value of the state
init: function() returns the starting state

example with useState
<code>
import { useState } from "react";

export default function demo() {
	const [cnt, setCnt] = useState(10);
	return (
		<button onClick={() => setCnt(cnt + 1)}>
			{cnt}
		</button>
	);
}
</code>
same functionality with useReducer
<code>
import { useReducer } from "react"'

function reducer(state, action) {
	switch(action.type) {
		case "increment": return state + action.incrementValue;
		default: return action;
	}
}

export default function demo() {
	const [state, dispatch] = useReducer(reducer, 10);
	return (
		<button onClick={() => dispatch({
			type: "increment",
			incrementValue: 1,
		})}>
			{state}
		</button>
	);
}
</code>

example of updating a complicated state
<code>
function reducer(state, action) {
	switch(action.type) {
		case "loaded": return { ...state, loading: false, speakers: action.speakers };
		case "setLoadingStatus": return { ...state, loading: true };
		case "update":
			const speakersUpdated = state.speakers.map((rec) =>
				action.speaker.id === rec.id ? action.speaker : rec
			);
			return { ...state, speakers: speakersUpdated };
		default: throw new Error(`case failure: action type {action.type}`);
	}
}
</code>

#Memoize, Memo, useMemo

memo-ize
to make a memo, which here means to cache a value
a type of hook

With pure functions, you can cache input-to-output pairs to improve performance.

Wrap the component in React.Memo
<code>
import { memo } from "react";

const Component = (props) => {
	return (
		<div>{props.value}</div>
	);
};

export const ComponentMemo = memo(Component);
</code>
The caching will now be handled automatically.

Do not wrap all components in memo - memory IS limited, and React is already pretty time-efficient.
Use profiling tools to determine where using memo is actually faster.
Look for component functions that
- are pure functions
- return non-trivial JSX
- are often called for the same inputs

memoize a long-running calculation
<code>
const result = useMemo(() => {
	return longRunningCalculation(data);
}, [data]);
</code>

advanced memo: pass in the second argument that determines if a re-render is needed
<code>
import { memo } from "react";

const memoizedComponent = memo(
	originalComponent,
	(previousProps, newProps) => {
		if(previousProps.criticalValue != newProps.criticalValue) return true;
		return false;
	}
);
</code>
This is one way to handle functions being passed to a child component. A new version of the functions will be passed in each time the parent re-renders, but maybe that doesn't matter to the child.

#Effects

In React, side effects are just called "effects".
Side effects are when functions are not pure - they rely on or change the state outside of themselves. They do not give consistent outputs based on their inputs.
Ex: calling an API (could throw an error), using time outs, using the browser's document or window

Effect hook: this part of a component function will be run AFTER the pure part of the function has run and the browser has been reconciled.
<code>
useEffect(() => {
	//do a not-pure function
});
</code>

<code>
import React, {useEffect, useState } from "react";

const Component = () => {
	const [integers, setIntegers] = useState([]);
	
	useEffect(() => {
		//useEffect cannot be marked async itself, so wrap await calls in local async functions
		const fetchData = async () => {
			const response = await fetch("api/data");
			const data = await response.json();
			setIntegers(data);
		};
		fetchData();
	});
	
	return (
		<>
			{integers.map(i => "Number "+i+"<br/>")}
		</>
	);
};
</code>
So on the first invocation, this component will render an empty node, then the effect will run, the effect will update the state of the component, that will trigger the component to run again and render the data.
Does the effect run again the second time? Yes. Yes, it does, every time the component is invoked.
To avoid that, you need extra logic to tell the effect to not run every time.
<code>
const [counter, setCounter] = useState(0);

useEffect(() => {
	document.title = counter; //just an example for illustration
}, [counter]); //this is a Dependency Array, the function will only run when a value in this array is edited
</code>
Specify an empty dependency array to mark a useEffect function as "run once only"
<code>
useEffect(() => {
	//load data from api
}, []);
</code>

You can have multiple useEffect calls in one component, and they can have different dependency arrays.

Return a "cleanup" function from useEffect
The cleanup will be run (1) when the component is unmounted (removed from the UI), but also (B) before each time the useEffect is invoked.
<code>
useEffect(() => {
	//subscribe to an event stream
	
	return () => {
		//cleanup
		//unsubscribe from event stream
	};
}, []);
</code>

#Ref Hook

Ref hook persists values between re-render calls without triggering a re-render.
So it is like state, but does not cause re-rendering.

<code>
const Component = () => {
	const counter = useRef(0); //count number of renderings without causing more to happen
	
	counter.current++;
};
</code>

Can be used to get a direct reference to a DOM element
so you can operate on it with plain javascript
but this only lasts until a re-render that replaces the DOM element

<code>
import { useRef } from "react";

export default function demo() {
	const imgRef = useRef();
	
	return (
		<img src='image.png' ref={imgRef} 
		style={{filter: "grayscale(100%)"}} 
		onMouseOver={() => { imgRef.current.style.filter = "grayscale(0%)"; }}
		/>
	);
}
</code>

#Decomposition

Components can refer to other components.

It is common to start an entire web application from one "App" component.

<code>
function Welcome(props) 
{
	return <h1>Hello, {props.name}</h1>;
}

function App() 
{
	return (
		<div>
		  <Welcome name="Sara" />
		  <Welcome name="Cahal" />
		  <Welcome name="Edite" />
		</div>
	);
}

ReactDOM.render(
	<App />,
	document.getElementById('root')
);
</code>

Design components the way you would an object oriented model. Each component should be reusable and do just its own job.

#Higher Level Component

A higher level component accepts a component argument instead of a props argument.
It will return an enhanced version of the component that was passed in.

It is used to pass extra values into the argument-component as props.

<code>
import { useState } from 'react';

const App = ({darkTheme, toggleTheme}) => {
	return (
		<div data-theme={darkTheme ? "dark" : "light"} onClick={() => toggleTheme()}>
			Toggle Dark Theme
		</div>
	);
};

const withTheme = (Component) => {
	function Func(props) {
		const [darkTheme, setDarkTheme] = useState(true);
		return (
			<Component {...props}
				darkTheme={darkTheme}
				toggleTheme={() => setDarkTheme(!darkTheme)}
			/>
		);
	}
	return Func; //returns a named function rather than an anonymous one to keep linter from complaining
};

export default withTheme(App);
</code>
Every component in the app that needs to know the theme can be called as "withTheme(Component)".
(Code sample above is not a complete solution)

#Design

No component should care if another component is stateful or stateless.

No component should care if another component is a function or class component.

A component can pass its state "down" as props to a child component.
Data is never passed "up" from child to parent component.
aka Top down data flow
aka Unidirectional data flow