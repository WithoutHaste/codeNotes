##AJAX

AJAX provides asynchronous HTTP Requests.

Razor includes an AJAX helper called "Ajax".

#Unobtrusive

All ASP.Net MCV Ajax uses the "Unobtrusive JavaScript" approach to JavaScript.

This means that javascript is not mixed into HTML elements (ex: <a onclick="handleClick()" />).

It also means that even if the client has javascript disabled in their browser, you're web page will still function.

Example of form tag generated by "Ajax.BeginForm":
<code>
	<!-- these are "Data Dash Attributes" -->
	<!-- Data Dash Attributes are private data for the application, and are ignored by the browser -->
	<form action="/" data-ajax="true" data-ajax-method="get" data-ajax-mode="replace" data-ajax-update="#countryList" method="post">
	</form>
</code>
If javascript is enable, this form will have events attached to it, based on the "data-ajax" attributes, so that this request will be sent as an AJAX request.
If javascript is not enabled, this request will still run as a normal form submission, and the entire page will reload with the new data.

Form validation works the same way.

#Link

Generates a link for an asynchronous request that will update the screen instead of navigating to a new page.

<code>
@Ajax.ActionLink(...)
</code>

#Form

Example of using AJAX to load search results without reloading the entire page:
<code>
//inside a *.cshtml page
@using(Ajax.BeginForm(new AjaxOptions { 
	HttpMethod="get",
	InsertionMode=InsertionMode.Replace, //the results of this request will replace a section of the current HTML page
	UpdateTargetId="countryList"         //the HTML element whose contents will be replaced has id "countryList"
	}))
{
	<input type="search" name="searchTerm"/>
	<input type="submit" value="Search by Name"/>
}
<div id="countryList">
	@foreach(MyModel item in Model)
	{
		//render item
	}
</div>
</code>
Because the AJAX results will be inserted directly into the current page, make sure that the AJAX results come from a Partial View.

Distinguish AJAX request within controller:
<code>
//in controller
public ActionResult MyMethod(MyModel model)
{
	...
	if(Request.IsAjaxRequest()) //checks an HTTP Header
	{
		return PartialView("_MyView", model);
	}
	return View(model);
}
</code>
