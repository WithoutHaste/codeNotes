##Model Binding

#Data Source

By default, Web API gets the values of primitive parameters from the query string, and complex parameters from the request body.

Specify value is bound from the query string:
<code>
public IActionResult MyAction([FromUri] ComplexType input) { }
</code>

Specify value is bound from request body:
<code>
public IActionResult MyAction([FromBody] string input) { }
</code>

#Custom Binders

You can specify which model binder to use on each object:
<code>
[ModelBinder(typeof(MyModelBinder))]
public class MyClass { }
</code>

Or on each Action parameter:
<code>
public IActionResult MyAction([ModelBinder(typeof(MyModelBinder))] MyEnum input) { }
</code>

Or register it for the entire application:
<code>
using Microsoft.AspNetCore.Mvc.ModelBinding;

public class MyModelBinderProvider : IModelBinderProvider
{
	public IModelBinder GetBinder(ModelBinderProviderContext context)
	{
		if (context.Metadata.ModelType == typeof(TypeToApplyModelBinderTo))
			return new MyModelBinder();

		return null;
	}
}

public void ConfigureServices(IServiceCollection services)  
{  
    services.AddMvc(  
        config => config.ModelBinderProviders.Insert(0, new MyModelBinderProvider())  
    );  
}
</code>

#Bind String to Enum

By defining string values on your enum, the default model binder will convert incoming strings to enums.

<code>
public enum MyEnum
{
	[EnumMember(Value = "AAA")] Aaa,
	[EnumMember(Value = "BBB")] Bbb,
	[EnumMember(Value = "CCC")] Ccc
}

public class MyType
{
	public string Name { get; set; }
	public MyEnum Code { get; set; }
}

public IActionResult MyAction(MyType input) { }

//JSON request body { Name:"Bob", Code:"CCC" }
//input { Name="Bob", Code=MyEnum.Ccc }
</code>


#Custom String To Enum

Model bind string value of an enum to the enum value.

Enum
<code>
public enum MyEnum
{
	[EnumMember(Value = "AAA")] Aaa,
	[EnumMember(Value = "BBB")] Bbb,
	[EnumMember(Value = "CCC")] Ccc
}
</code>

Model Binder
<code>
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.ModelBinding;

internal class StringEnumModelBinder : IModelBinder
{
	public Task BindModelAsync(ModelBindingContext bindingContext)
	{
		if (bindingContext == null)
			throw new ArgumentNullException(nameof(bindingContext));
		if (!bindingContext.ModelType.IsEnum)
			throw new InvalidOperationException("ModelType is not an Enum.");
		Type enumType = bindingContext.ModelType;

		ValueProviderResult values = bindingContext.ValueProvider.GetValue(bindingContext.FieldName);
		if (values.Length == 0)
			return Task.CompletedTask;
		string enumString = values.FirstValue;

		Object enumValue = Activator.CreateInstance(enumType);
		if (Enum.TryParse(enumType, enumString, true, out enumValue))
		{
			bindingContext.Result = ModelBindingResult.Success(enumValue);
		}
		return Task.CompletedTask;
	}
}
</code>
