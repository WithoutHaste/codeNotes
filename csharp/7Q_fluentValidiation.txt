#FluentValidation

FluentValidation is a .Net library for strongly-typed validation rules.

Ex:
<code>
using FluentValidation;

public class CustomerValidator : AbstractValidator<Customer> {
	public CustomerValidator() {
		RuleFor(x => x.Surname).NotEmpty();
		RuleFor(x => x.Forename).NotEmpty().WithMessage("First name is required");
		RuleFor(x => x.Discount).NotEqual(0).When(x => x.HasDiscount);
		RuleFor(x => x.Address).Length(20, 250);
		RuleFor(x => x.Postcode).Must(BeAValidPostcode).WithMessage("Postcode is required");
	}

	private bool BeAValidPostcode(string postcode) {
		// custom postcode validating logic goes here
	}
}
</code>

#Integration

FluentValidation supports integration with ASP.NET Core 2.1 or 3.1 (3.1 recommended). Once enabled, MVC will use FluentValidation to validate objects that are passed in to controller actions by the model binding infrastructure.
!![Documentation](https://docs.fluentvalidation.net/en/latest/aspnet.html)

1. Include package FluentValidation.AspNetCore
2. Configure your service to integrate with FluentValidation
<code>
public void ConfigureServices(IServiceCollection services) {
	services.AddMvc(setup => {
		// mvc setup
	}).AddFluentValidation();
}
</code>
3. Configure your service to use specific Validators you've written
<code>
public void ConfigureServices(IServiceCollection services) {
	services.AddMvc(setup => {
		//mvc setup
	}).AddFluentValidation();

	services.AddTransient<IValidator<Person>, PersonValidator>();
}
</code>
3b. Or tell the service to use all AbstractValidator subtypes it finds in your assembly
<code>
public void ConfigureServices(IServiceCollection services) {
	services.AddMvc(setup => {
		// mvc setup
	}).AddFluentValidation(fv => {
		fv.RegisterValidatorsFromAssemblyContaining(GetType());
	});
}
</code>

When validators are executed using this automatic integration, the RootContextData contains an entry called InvokedByMvc with a value set to true, which can be used within custom validators to tell whether a validator was invoked automatically (by MVC), or manually.

#Testing

!![Documentation](https://docs.fluentvalidation.net/en/latest/testing.html)

Library includes test extensions:
<code>
using FluentValidation;
using FluentValidation.TestHelper;
using Xunit;

public class PersonValidatorTests
{
	[Fact]
	public void NullName_ReturnsError()
	{
		//Arrange
		var validator = new PersonValidator();
		var name = default(string);
		
		//Act Assert
		validator.ShouldHaveValidationErrorFor(person => person.Name, name);

		//checking for errors
		validator
			.ShouldHaveValidationErrorFor(person => person.Name, name)
			.WithErrorMessage("Name is required")
			.WithSeverity(Severity.Error)
			.WithErrorCode("NotNullValidator");

		//checking for a lack of errors
		validator
			.ShouldNotHaveValidationErrorFor(person => person.Name, name)
			.WithoutErrorMessage("Name is required")
			.WithoutSeverity(Severity.Error)
			.WithoutErrorCode("NotNullValidator");
	}

	[Fact]
	public void MinimumName_Success()
	{
		//Arrange
		var validator = new PersonValidator();
		var name = "a";
		
		//Act Assert
		validator.ShouldNotHaveValidationErrorFor(person => person.Name, name);
	}

	[Fact]
	public void Example_of_setting_multiple_fields_at_once()
	{
		//Arrange
		var validator = new PersonValidator();
		var person = new Person() {
			Name = "Francis",
			age = 14
		};
		
		//Act Assert
		validator.ShouldNotHaveValidationErrorFor(p => p.Name, person);
	}

	[Fact]
	public void Example_of_asserting_on_multiple_fields_at_once()
	{
		//Arrange
		var validator = new PersonValidator();
		var person = new Person() {
			Name = "Francis",
			age = 14
		};
		
		//Act
		var result = validator.TestValidate(person);
		
		//Assert
		result.ShouldNotHaveValidationErrorFor(p => p.Name);
		result.ShouldNotHaveValidationErrorFor(p => p.Age);
	}
}
</code>