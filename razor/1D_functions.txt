##Functions

#@Helpers

@Helpers are functions that do not return a value. They output directly to the page.

<code>
@helper DisplayPrice(decimal price) 
{
	if(price == 0)
	{
		<span>Free!</span>
	}
	else
	{
		<span>@String.Format("{0:C2}", price)</span>
	}
}
@foreach(Product x in list)
{
	<p>@x.Name: @DisplayPrice(x.Price)</p>
}
</code>

If you call a helper from within a helper, always use the "@" symbol. Even if the syntax highlighter indicates that the method call is recognized as such, it'll get skipped.
<code>
@helper A()
{
	@B();
}
@helper B()
{
	@:Reached B
}
</code>

Note that you cannot code-step through a @helper (at least in VS2015), but the code does run.

#Functions

Functions do return values.

<code>
@functions 
{
	string FormatPrice(decimal price)
	{
		if(price == 0)
			return "Free!";
		return String.Format("{0:C2}", price);
	}
}
@foreach(Product x in list)
{
	<p>@x.Name: @FormatPrice(x.Price)</p>
}
</code>

#Global

You can create global helpers and functions (usable in any View) by adding them to a *.cshtml file in folder Project/App_Code.

Project/App_Code/GlobalHelpers.cshtml
<code>
@helper DisplayAuthor(Author author) {
	<a href="@Url.Action("Details", "Author")">@author.LastName</a>
}

@functions {
	public static string SayTest() {
		return "test";
	}
}
</code>

Any view file:
<code>
@GlobalHelpers.DisplayAuthor(book.Authors.First())

@GlobalHelpers.SayTest()
</code>

Note that the helper/function is accessed based the name of the file it is in.

