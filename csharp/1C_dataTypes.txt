##Numerics

#Int

32-bit integer.

Accepted integer literal formats:
<code>
var a = 13;
var b = 1_000_000; //1,000,000
</code>

#Long

64-bit integer.

#Float

32-bit floating point number. Can hold 7 significant digits.

Cannot accurately store all numbers within its precision range.

#Double

64-bit floating point number - more precise than float. Can hold 15 to 16 significant digits.

Cannot accurately store all numbers within its precision range.

#Decimal

128-bit floating point number - more precise than double. Can hold 28 to 29 significant digits. Comes with slower operations.

Decimal can accurately store any number within its precision range.

#Binary

Binary literal
<code>
public const int Sixteen =   0b00010000;
public const int ThirtyTwo = 0b00100000;
public const int SixtyFour = 0b01000000;
</code>
"0b" prefix indicates a binary number.

#Digit Separator

As of C# 7, you can insert the "_" digit seperator anywhere in a number literal to improve its legibility.

<code>
public const int Sixteen =   0b0001_0000; //base 2
public const long BillionsAndBillions = 100_000_000_000; //base 10
public const double AvogadroConstant = 6.022_140_857_747_474e23; //base 10 decimal places
</code>

(.Net 7.2)

Binary and hexadecimals can have the digit separator right after the prefix:
<code>
public const int Sixteen =   0b_0001_0000; //base 2
</code>

#NaN

NaN: Not a Number

<code>
if(Double.IsNaN(x)
{
}
</code>

#Infinity

<code>
if(Double.IsInfinity(x)) //either negative or positive
{
}
if(Double.IsNegativeInfinity(x))
{
}
if(Double.IsPositiveInfinity(x))
{
}
</code>
