##Part 3: Refactoring Toward Deeper Insight

"[I've] laid down a foundation for maintaining the correspondence between model and implementation...the real challenge is to actually find an incisive model, one that captures subtle concerns of the domain experts and can drive practical design."

"...a model that captures a deep understanding of the domain...should make the software more in tune with the way the domain experts think and more responsive to the user's needs."

About useful models:
- sophisticated domain models are achievable and worth the trouble.
- they are seldom developed except through an iterative process of refactoring, including close involvement of the domain experts with developers interested in learning about the domain.
- they may call for sophisticated design skills to implement and to use effectively.

"Refactoring is the redesign of software in ways that do not change its functionality...Rather than making elaborate up-front design decisions, developers take code through a continuous series of small, discrete design changes, each leaving existing functionality unchanged while making the design more flexible or easier to understand."

"But nearly all the literature on how to refactor focuses on mechanical changes to the code that make it easier to read or to enhance at a very detailed level...it is primarily a technical view of the quality of a design."

"The refactorings that have the greatest impact on the viability of the system are those motivated by new insights into the domain or those that clarify the model's expression through the code...The goal is not only can a developer understand what the code does; he or she can also understand why it does what it does and can relate that to the ongoing communication with the domain experts."

It is not possible to compile a cookbook of domain-level refactorings, as they are each so particular to one project.

"Modeling is as inherently unstructured as any exploration...Refactoring to deeper insight should follow wherever learning and deep thinking lead...Modeling and design call for creativity."

"The traditional way of explaining object analysis involves identifying nouns and verbs in the requirements documents and using them as the initial objects and methods. This explanation is recognized as an oversimplification...[but] initial models usually are naive and superficial, based on shallow knowledge."

Example of how a model changed from (Ship, Container) to (Vessel Voyage, Bill of Lading, etc).

"A deep model provides a lucid expression of the primary concerns of the domain experts and their most relevant knowledge while it sloughs off the superficial aspects of the domain."

"Versatility, simplicity, and explanatory power come from a model that is truly in tune with the domain."

"A model-driven design stands on two legs. A deep model makes possible an expressive design. At the same time, a design can actually feed insight into the model discovery process when it has the flexibility to let a developer experiment and the clarity to show a developer what is happening...This half of the feedback loop is essential, because the model we are looking for is not just a nice set of ideas: it is the foundation of the system."

"You will usually depend on creativity and trial and error to find good ways to model the concepts you discover, but sometimes someone has laid down a pattern you can follow." (see Analysis Patterns)

#Ch 8 Breakthrough

"The returns from refactoring are not linear...some of the most important insights come abruptly and send a shock through the project."

Most refactorings will be small. Occasionally, an insight will be revealed that enables a massive change to the model.

"Each refinement of code and model gives developers a clearer view. This clarity creates the potential for a breakthrough of insights...A rush of change leads to a model that corresponds on a deeper level to the realities and priorities of the users...Versatility and explanatory power suddenly increase even as complexity evaporates."

"This sort of breakthrough is not a technique; it is an event...Don't become paralyzed trying to bring about a breakthrough. The possibility usually comes after many modest refactorings."

Sounds like enlightment being an accident, which meditation makes more likely.

Example of a real project experiencing a breakthrough.
Model (Investment, Load Investment, Loan Adjustment) becomes (Share Pie, Share, Percent Pie, Amount Pie).

"Suddenly, on the basis of this new way of looking at the domain, we could run through every scenario we had ever encountered relatively effortlessly, much more simply than ever before...And our model diagrams made perfect sense to the business experts, who had often indicated that the diagrams were 'too technical' for them."

Having a brilliant insight will require a lot of changes to the code. This will have to be scheduled like any other task.
It will probably not be possible to complete the changes as a series of small refactorings - rather you'll need some large single-edits.

"When the prospect of a breakthrough to a deeper model presents itself, it is often scary. Such a change has higher opportunity and higher risk than most refactorings."

"To set the stage for a breakthrough, concentrate on knowledge crunching and cultivating a robust Ubiquitous Language. Probe for important domain concepts and make them explicit in the model. Refine the design to be suppler. Distill the model. Push on these more predictable levers, which increase clarity - usually a precursor of breakthroughs."

"Don't hold back from modest improvements, which gradually deepen the model, even if confined within the same general conceptual framework...Don't be paralyzed by looking too far forward."

#Ch 9 Making Implicit Concepts Explicit

"A deep model has power because it contains the central concepts and abstractions that can succinctly and flexibly express essential knowledge of the users' activities, their problems, and their solutions."

The model progresses when a concept that turned up in discussions becomes an explicit object or relationship in the model.

"The process starts with recognizing the implied concepts in some form, however crude."

How to identify these implicit concepts?
- listen to the language of the team
  - is there a succint term that encapsulates something complicated?
  - do the experts keep correcting your word choice?
  - do the users use words that are not in your model at all?
- scrutinize awkwardness in the design
- scrutinize seeming contradictions in the statements of experts
- search the literature of the domain - read the book
- experiment with the model

"Hearing a new word produces a lead, which you follow up with conversation and knowledge crunching, with the goal of carving out a clean, useful concept."

Example: a result that is compiled from multiple objects, may turn out to be an important object in its own right.
Example: all the work is being done, but the placement of the actions in objects feels awkward.
Example: continuing the Shipping project.

"The place to dig is the most awkward part of your design. The place where procedures are doing complicated things that are hard to explain. The place where every new requirement seems to add complexity."

Example: project about earning interest on assets.

"Pesky contradictions, which we encounter all the time when digging into program requirements, can be great clues to deeper models...Some are just variations in terminology or are based on misunderstanding. But there is a residue where two factual statements by experts seem to contradict."

"It is not practical to reconcile all contradictions, and it may not even be desirable."

"The examples I've given don't convey the amount of trial and error involved. I might follow half a dozen leads in conversation before finding one that seems clear and useful enough to try out in the model...A modeler/designer cannot afford to get attached to his own ideas."

"All these changes of direction are not just thrashing. Each change embeds deeper insight into the model. Each refactoring leaves the design more supple, easier to change the next time, ready to bend in the places that turn out to need to bend."

What to make explicit?
- Constraints
- Policies
- Processes
- Specifications

Examples of Specifications implementations and patterns (Chemical Warehouse Packer).

#Ch 10 Supple Design

"The ultimate purpose of software is to serve users. But first, that same software has to serve developers...People have to work with this stuff [the code]. But will they want to?"

"Duplication starts to appear as soon as a developer isn't confident of predicting the full implications of a computation...Duplication is forced when design elements are monolithic, so that the parts cannot be recombined."

The worse code is to work with, the slower the project will progress. To enable continuous fast delivery, you must maintain clean code with a supple design.

"Supple design is the complement to deep modeling. Once you've dug out implicit concepts and made them explicit, you have the raw material."

"A lot of overengineering has been justified in the name of flexibility. But more often than not, excessive layers of abstraction and indirection get in the way...Look at the design of software that really empowers the people who handle it; you will usually see something simple. Simple is not easy."

"To be open to change, a design must be easy to understand, revealing the same underlying model that the client developer is drawing on. It must follow the contours of a deep model of the domain, so most changes bend the design at flexible points. The effects of its code must be transparently obvious, so the consequences of a change will be easy to anticipate...There is no formula for designing software like this."

Useful patterns that help create a Supple Design:
- Ubiquitous Language
- Model-Driven Design
- Intention-Revealing Interfaces
- Side-Effect-Free Functions (see Nullipotent Functions)
- Assertions
- Stand Alone Classes
- Conceptual Contours
- Closure of Operations

Abstractions that do not clearly state their effects are not valuable, because you must read within the abstraction to understand what it is doing. Developers should not need to dig into the internals of objects/modules, but they frequently do because the interface is not communicative.

"We are always fighting cognitive overload: If the client developer's mind is flooded with detail about how a component does its job, his mind isn't clear to work out the intricacies of the client design...If a developer must consider the implementation of a component in order to use it, the value of encapsulation is lost."

When purpose is inferred by another developer later, they may infer that a coincidental side effect is promised functionality, and write their code to rely on functionality that becomes transitory.

"To obtain the value of explicity modeling a concept in the form of a class or method, we must give these program elements names that reflect those concepts. The names of classes and methods are great opportunities for improving communication between developers, and for improving the abstraction of the system...All public elements of a design together make up its interface, and the name of each of those elements presents an opportunity to reveal the intention of the design...Type names, Method names, and Argument names all combine to form an Intention-Revealing Interface."

"Name classes and operations to describe their effect and purpose, without reference to the means by which they do what they promise...These names should conform to the Ubiquituous Language so that team members can quickly infer their meaning...Pose the question, but don't present the means by which the answer shall be found."
(see Declarative Languages)

Ongoing example: Paint Mixer.

This book uses terms Commands/Modifiers (functions with side-effects) and Queries/Functions (functions without side-effects, i.e. Nullipotent functions).
This book follows the standard usage of Side-Effect in programming: a Side-Effect is any change to the system, whether it was intentional or not.

Nullipotent functions are safe to call and combine.
Nullipotent functions are easier to test.
Nullipotent functions lower risk.
Separating functionality into Nullipotent functions where possible will improve the design of code by making it clear which operations are safe.
This decreases the cognitive load on developers and increases their power in the system.

It is suggested that functions with side-effects should not return domain data. (Considering this, it brings up performance questions.)

Using Value Objects as immutable objects helps you make more of your functions into Nullipotent functions, because operations will return a new object instead of modifying an existing one.

"Place as much of the logic of the program as possible into [nullipotent] functions...Structuraly segregate [non-nullipotent] commands into very simple operations that do not return domain information. Further control side effects by moving complex logic into Value Objects when a concept fitting the responsibility presents itself."

"The developer using the high-level command must understand the consequences of each underlying command. So much for encapsulation...And because object interfaces do not restrict side effects, two subclasses that implement the same interface can have different side effects. The developer using them will want to know which is which to anticipate the consequences. So much for abstraction and polymorphism...The necessity of tracing concrete execution defeats abstraction."

Assertions:
- make side effects explicit
- part of Design By Contract
- Post Conditions describe the side effects of the operation
- Pre Conditions describe what must be true for the Post Conditions to be trusted
- Class Invariants make Assertions about the state of the object at the end of any operation
- Assertions to include the effects of delegation (down stream side effects)
  - this could require more validation during refactoring - if one down stream side effect is removed, you must update all Assertions up the stack and verify that this was the only source of that side effect

"All these assertions describe state, not procedures, so they are easier to analyze."

"If you trust the guarantee of a Post Condition, you don't have to worry about how a method works."

"If Assertions cannot be coded directly in your programming language, write automated unit tests for them. Write them into documentation...Seek models with coherent sets of concepts, which lead a developer to infer the intended Assertions..."

Conceptual Contours

"There is a logical consistency deep in most domains, or else they would not be viable in their own sphere...There is a rhyme and reason somewhere, or else modeling would be pointless. Because of this underlying consistency, when we find a model that resonates with some part of the domain, it is more likely to be consistent with other parts that we discover later...This is one reason why repeated refactorings eventually leads to suppleness."

"The conceptual contours emerge as the code is adapted to newly understood concepts or requirements."

"The twin fundamentals of high cohesion and low coupling play a role in design at all scales, from individual methods up through classes and modules to large-scale structures. These two principles apply to concepts as much as to code...To avoid slipping into a mechanistic view of them, temper your technical thinking by frequently touching base with your intuition for the domain...Find the conceptually meaningful unit of functionality, and the resulting design will be both flexible and understandable."

"Observe the axes of change and stability through successive refactorings and look for the underlying conceptual contours that explain these shearing patterns."

"The goal is a simple set of interfaces that combine logically to make sensible statements in the uiquitous language, and without the distraction and maintenance burden of irrelevant options."

"Encountering a requirement that forces extensive changes in the breakdown of the objects and methods is a message: our understanding of the domain needs refinement."

Example: continues with Accruals/Loans.
"This ease of extension did not come because she anticipated the change. Nor did it come because she made a design so versatile it could accommodate any conceivable change. It happened because in the previous refactoring, the design was aligned with underlying concepts of the domain."

Standalone Classes

"Interdependencies make models and designs hard to understand. They aslso make the hard to test and maintain. And interdependencies pile up easily."

"Every association is a dependency, and understanding a class requires understanding what it is attached to...the type of every argument...every return value..."

"Both modules and aggregates are aimed at limiting the web of interdependecies."

One big reason to limit interdepencies is to not overload the developer mentally. Massive webs of interdependent objects are hard to understand and reason about.

"Implicit concepts contribute to this [mental] load even more than explicit references."

A standalone class is a class with zero dependencies (except for primitives and basic library functions, which do not add to mental load).
- allowing dependencies on primitives, such as integers, does not mean ignoring the meaning of those variables
- see Paint Mixing example, and pulling Pigment Color out into its own class

"Every dependency is suspect until proven basic to the concept behind the object. This scrutiny starts with the factoring of the model concepts themselves. Then it requires attention to each individual association and operation. Model and design choices can chip away at dependencies, often to zero."

Dependencies on classes within the same module are less of a burden than dependencies on external classes.

When two classes are tightly coupled, even more coupling can actually clarify their relationship.

"The goal is not to eliminate all dependencies, but to eliminate all nonessential ones."

Closure of Operations

This term comes from mathematics.  For example, addition is an operation closed over the set of real numbers. 1 + 1 = 2. Add any two real numbers together, and the result will also be a real number.

"Wherever it fits, define an operation whose return type is the same as the type if its arguments...This pattern is most often applied to the operations of a Value Object."

"A closed operation provides a high-level interface without introducing any dependency on other concepts."

"These techniques require fairly advanced design skills to apply and sometimes even to write a client. The usefulness of a Model Driven Design is sensitive to the quality of the detailed design and implementation decisions, and it only takes a few confused developers to derail a project from the goal."

Declarative Design

"This term means many things to many people, but usually it indicates a way to write a program, or some part of a program, as a kind of executable specification...This can be done through a reflection mechanism or at compile time through code generation...This approach allows another developer to take the declaration at face value."

"Generating a running program from a declaration of model properties is a kind of Holy Grail of Model Driven Design."

Problems with pure Declarative Design
- the declarative language does not do everything you need, and the framework is difficult or impossible to extend
- code generation destroys manually-written code
- in response to these limitations, developers dumb down the model and application

Problems with Rule Engines
- most systems are not purely Declarative because they include "control predicates" to support performance tuning. this introduces side-effects.
- adding/removing/reordering rules causes incorrect results

"Many declarative approaches can be corrupted if the developers bypass them intentionally or unintentionally. This is likely when the system is difficult to use or overly restrictive."

"The greatest value I've seen delivered has been when a narrowly scoped framework automates a particularly tedious and error-prone aspect of the design, such as persistence and object-relational mapping...The best of these unburden developers of drudge work while leaving them complete freedom to design."

Domain Specific Languages

"...client code is written in a programming lanuage tailored to a particular model of a particular domain. For example, a language for shipping systems might include terms such as CARGO and ROUTE, along with syntax for associating them...The program is then compiled, often into a conventional object-oriented language, where a library of classes provides implementations for the terms in the language."

Problems with Domain Specific Languages
- to refine the model, the developer must edit the programming language - designing and editing a programming language is an advanced skill
- loses the value of an application and model implemented in the same language

Declarative Style

The more you use intention-revealing interfaces, side-effect-free functions, and assertions, the closer you are to being Declarative.

Returning to the Chemical Packing example to look at Specification patterns
- design that uses trees of objects for combining AND/OR/NOT logic (a basic object-oriented design)
- design that uses a flat array of objects interpreted as a logic tree (in response to memory constraints)

How to get started on making a design more supple
- carve out a subdomain and work just on that part
- draw on established formalisms (such as Accounting or Boolean Logic)

Detailed example of refactoring Loans/Shares
"Complex logic is encapsulated in specialized Value Objects with side-effect-free functions...State-modifying operations are simple and characterized with Assertions...Model concepts are decoupled; operations entangle a minimum of other types...Familiar formalisms make the protocol easy to grasp."

#Ch 11 Applying Analysis Patterns

(From Fowler's "Analysis Patterns") "Analysis Patterns are groups of concepts that represent a common construction in business modeling. It may be relevant to only one domain or it may span many domains."

These patterns are starting points, based on the trial and error of others. They are not expected to be complete, finished designs appropriate to every project.

"To discuss model idea out of that context makes them harder to apply and risks opening the deadly divide between analysis and design, which is antithetical to Model Driven Design...The principle and application of analysis patterns can be explained better by example than through abstract description."

"In this chapter, I will give two examples of developers making use of a small, representative sample of models fro the chapter 'Inventory and Accounting' in Fowler 1997...The point is to illustrate their integration into the Domain Driven Design process."

Example: Earning interest with accounts

"Sometimes there are parts of our programs that we don't even suspect have the potential to benefit from a domain model. They may have started very simply and evolved mechanistically. They seem like complicated application code, rather than domain logic. Analysis patterns can be particularly helpful in showing us these blind spots."

Example: Posting rules

"When you are lucky enough to have an analysis pattern, it hardly ever is the answer to your particular needs. Yet it offers valuable leads in your investigation, and it provides cleanly abstracted vocabulary."

To reiterate - analysis patterns are excellent sources of vocabulary.
Warning - do not change the usage of well-defined terms.

"It should also give you guidance about implementation consequences that will save you pain down the road."

"Sometimes the result doesn't even obviously relate to the analysis pattern itself, yet was stimulated by the insights from the pattern."

#Ch 12 Relating Design Patterns to the Model

#Ch 13 Refactoring Toward Deeper Insight
